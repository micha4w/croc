// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module sdhci_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 8
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output sdhci_reg_pkg::sdhci_reg2hw_t reg2hw, // Write
  input  sdhci_reg_pkg::sdhci_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import sdhci_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] system_address_qs;
  logic [31:0] system_address_wd;
  logic system_address_we;
  logic [11:0] block_size_and_count_transfer_block_size_qs;
  logic [11:0] block_size_and_count_transfer_block_size_wd;
  logic block_size_and_count_transfer_block_size_we;
  logic [2:0] block_size_and_count_host_dma_buffer_boundary_qs;
  logic [2:0] block_size_and_count_host_dma_buffer_boundary_wd;
  logic block_size_and_count_host_dma_buffer_boundary_we;
  logic block_size_and_count_rsvd_15_qs;
  logic [15:0] block_size_and_count_blocks_count_for_current_transfer_qs;
  logic [15:0] block_size_and_count_blocks_count_for_current_transfer_wd;
  logic block_size_and_count_blocks_count_for_current_transfer_we;
  logic [31:0] argument_qs;
  logic [31:0] argument_wd;
  logic argument_we;
  logic transfer_mode_and_command_dma_enable_qs;
  logic transfer_mode_and_command_dma_enable_wd;
  logic transfer_mode_and_command_dma_enable_we;
  logic transfer_mode_and_command_block_count_enable_qs;
  logic transfer_mode_and_command_block_count_enable_wd;
  logic transfer_mode_and_command_block_count_enable_we;
  logic transfer_mode_and_command_auto_cmd12_enable_qs;
  logic transfer_mode_and_command_auto_cmd12_enable_wd;
  logic transfer_mode_and_command_auto_cmd12_enable_we;
  logic transfer_mode_and_command_rsvd_3_qs;
  logic transfer_mode_and_command_data_transfer_direction_select_qs;
  logic transfer_mode_and_command_data_transfer_direction_select_wd;
  logic transfer_mode_and_command_data_transfer_direction_select_we;
  logic transfer_mode_and_command_multi_single_bit_block_select_qs;
  logic transfer_mode_and_command_multi_single_bit_block_select_wd;
  logic transfer_mode_and_command_multi_single_bit_block_select_we;
  logic [9:0] transfer_mode_and_command_rsvd_15_qs;
  logic [1:0] transfer_mode_and_command_response_type_select_qs;
  logic [1:0] transfer_mode_and_command_response_type_select_wd;
  logic transfer_mode_and_command_response_type_select_we;
  logic transfer_mode_and_command_rsvd_18_qs;
  logic transfer_mode_and_command_command_crc_check_enable_qs;
  logic transfer_mode_and_command_command_crc_check_enable_wd;
  logic transfer_mode_and_command_command_crc_check_enable_we;
  logic transfer_mode_and_command_command_index_check_enable_qs;
  logic transfer_mode_and_command_command_index_check_enable_wd;
  logic transfer_mode_and_command_command_index_check_enable_we;
  logic transfer_mode_and_command_data_present_select_qs;
  logic transfer_mode_and_command_data_present_select_wd;
  logic transfer_mode_and_command_data_present_select_we;
  logic [1:0] transfer_mode_and_command_command_type_qs;
  logic [1:0] transfer_mode_and_command_command_type_wd;
  logic transfer_mode_and_command_command_type_we;
  logic [5:0] transfer_mode_and_command_command_index_qs;
  logic [5:0] transfer_mode_and_command_command_index_wd;
  logic transfer_mode_and_command_command_index_we;
  logic [1:0] transfer_mode_and_command_rsvd_31_qs;
  logic [31:0] response0_qs;
  logic [31:0] response1_qs;
  logic [31:0] response2_qs;
  logic [31:0] response3_qs;
  logic [31:0] buffer_data_port_qs;
  logic [31:0] buffer_data_port_wd;
  logic buffer_data_port_we;
  logic present_state_command_inhibit_cmd_qs;
  logic present_state_command_inhibit_dat_qs;
  logic present_state_dat_line_active_qs;
  logic [4:0] present_state_rsvd_7_qs;
  logic present_state_write_transfer_active_qs;
  logic present_state_read_transfer_active_qs;
  logic present_state_buffer_write_enable_qs;
  logic present_state_buffer_read_enable_qs;
  logic [3:0] present_state_rsvd_15_qs;
  logic present_state_card_inserted_qs;
  logic present_state_card_state_stable_qs;
  logic present_state_card_detect_pin_level_qs;
  logic present_state_write_protect_switch_pin_level_qs;
  logic [3:0] present_state_dat_line_signal_level_qs;
  logic present_state_cmd_line_signal_level_qs;
  logic [6:0] present_state_rsvd_31_qs;
  logic host_and_power_and_block_gap_and_wakeup_control_led_control_qs;
  logic host_and_power_and_block_gap_and_wakeup_control_led_control_wd;
  logic host_and_power_and_block_gap_and_wakeup_control_led_control_we;
  logic host_and_power_and_block_gap_and_wakeup_control_data_transfer_width_qs;
  logic host_and_power_and_block_gap_and_wakeup_control_data_transfer_width_wd;
  logic host_and_power_and_block_gap_and_wakeup_control_data_transfer_width_we;
  logic host_and_power_and_block_gap_and_wakeup_control_high_speed_enable_qs;
  logic host_and_power_and_block_gap_and_wakeup_control_high_speed_enable_wd;
  logic host_and_power_and_block_gap_and_wakeup_control_high_speed_enable_we;
  logic [4:0] host_and_power_and_block_gap_and_wakeup_control_rsvd_7_qs;
  logic host_and_power_and_block_gap_and_wakeup_control_sd_bus_power_qs;
  logic host_and_power_and_block_gap_and_wakeup_control_sd_bus_power_wd;
  logic host_and_power_and_block_gap_and_wakeup_control_sd_bus_power_we;
  logic [2:0] host_and_power_and_block_gap_and_wakeup_control_sd_bus_voltage_select_qs;
  logic [2:0] host_and_power_and_block_gap_and_wakeup_control_sd_bus_voltage_select_wd;
  logic host_and_power_and_block_gap_and_wakeup_control_sd_bus_voltage_select_we;
  logic [3:0] host_and_power_and_block_gap_and_wakeup_control_rsvd_15_qs;
  logic host_and_power_and_block_gap_and_wakeup_control_stop_at_block_gap_request_qs;
  logic host_and_power_and_block_gap_and_wakeup_control_stop_at_block_gap_request_wd;
  logic host_and_power_and_block_gap_and_wakeup_control_stop_at_block_gap_request_we;
  logic host_and_power_and_block_gap_and_wakeup_control_continue_request_qs;
  logic host_and_power_and_block_gap_and_wakeup_control_continue_request_wd;
  logic host_and_power_and_block_gap_and_wakeup_control_continue_request_we;
  logic host_and_power_and_block_gap_and_wakeup_control_read_wait_control_qs;
  logic host_and_power_and_block_gap_and_wakeup_control_read_wait_control_wd;
  logic host_and_power_and_block_gap_and_wakeup_control_read_wait_control_we;
  logic host_and_power_and_block_gap_and_wakeup_control_interrupt_at_block_gap_qs;
  logic host_and_power_and_block_gap_and_wakeup_control_interrupt_at_block_gap_wd;
  logic host_and_power_and_block_gap_and_wakeup_control_interrupt_at_block_gap_we;
  logic [3:0] host_and_power_and_block_gap_and_wakeup_control_rsvd_23_qs;
  logic host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_card_interrupt_qs;
  logic host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_card_interrupt_wd;
  logic host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_card_interrupt_we;
  logic host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_insertion_qs;
  logic host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_insertion_wd;
  logic host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_insertion_we;
  logic host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_removal_qs;
  logic host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_removal_wd;
  logic host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_removal_we;
  logic [4:0] host_and_power_and_block_gap_and_wakeup_control_rsvd_31_qs;
  logic clock_and_timeout_control_and_software_reset_internal_clock_enable_qs;
  logic clock_and_timeout_control_and_software_reset_internal_clock_enable_wd;
  logic clock_and_timeout_control_and_software_reset_internal_clock_enable_we;
  logic clock_and_timeout_control_and_software_reset_internal_clock_stable_qs;
  logic clock_and_timeout_control_and_software_reset_sd_clock_enable_qs;
  logic clock_and_timeout_control_and_software_reset_sd_clock_enable_wd;
  logic clock_and_timeout_control_and_software_reset_sd_clock_enable_we;
  logic [4:0] clock_and_timeout_control_and_software_reset_rsvd_7_qs;
  logic [7:0] clock_and_timeout_control_and_software_reset_sdclk_frequency_select_qs;
  logic [7:0] clock_and_timeout_control_and_software_reset_sdclk_frequency_select_wd;
  logic clock_and_timeout_control_and_software_reset_sdclk_frequency_select_we;
  logic [3:0] clock_and_timeout_control_and_software_reset_data_timeout_counter_value_qs;
  logic [3:0] clock_and_timeout_control_and_software_reset_data_timeout_counter_value_wd;
  logic clock_and_timeout_control_and_software_reset_data_timeout_counter_value_we;
  logic [3:0] clock_and_timeout_control_and_software_reset_rsvd_23_qs;
  logic clock_and_timeout_control_and_software_reset_software_reset_for_all_qs;
  logic clock_and_timeout_control_and_software_reset_software_reset_for_all_wd;
  logic clock_and_timeout_control_and_software_reset_software_reset_for_all_we;
  logic clock_and_timeout_control_and_software_reset_software_reset_for_cmd_line_qs;
  logic clock_and_timeout_control_and_software_reset_software_reset_for_cmd_line_wd;
  logic clock_and_timeout_control_and_software_reset_software_reset_for_cmd_line_we;
  logic clock_and_timeout_control_and_software_reset_software_reset_for_dat_line_qs;
  logic clock_and_timeout_control_and_software_reset_software_reset_for_dat_line_wd;
  logic clock_and_timeout_control_and_software_reset_software_reset_for_dat_line_we;
  logic [3:0] clock_and_timeout_control_and_software_reset_rsvd_31_qs;
  logic normal_and_error_interrupt_status_command_complete_qs;
  logic normal_and_error_interrupt_status_command_complete_wd;
  logic normal_and_error_interrupt_status_command_complete_we;
  logic normal_and_error_interrupt_status_transfer_complete_qs;
  logic normal_and_error_interrupt_status_transfer_complete_wd;
  logic normal_and_error_interrupt_status_transfer_complete_we;
  logic normal_and_error_interrupt_status_block_gap_event_qs;
  logic normal_and_error_interrupt_status_block_gap_event_wd;
  logic normal_and_error_interrupt_status_block_gap_event_we;
  logic normal_and_error_interrupt_status_dma_interrupt_qs;
  logic normal_and_error_interrupt_status_dma_interrupt_wd;
  logic normal_and_error_interrupt_status_dma_interrupt_we;
  logic normal_and_error_interrupt_status_buffer_write_ready_qs;
  logic normal_and_error_interrupt_status_buffer_write_ready_wd;
  logic normal_and_error_interrupt_status_buffer_write_ready_we;
  logic normal_and_error_interrupt_status_buffer_read_ready_qs;
  logic normal_and_error_interrupt_status_buffer_read_ready_wd;
  logic normal_and_error_interrupt_status_buffer_read_ready_we;
  logic normal_and_error_interrupt_status_card_insertion_qs;
  logic normal_and_error_interrupt_status_card_insertion_wd;
  logic normal_and_error_interrupt_status_card_insertion_we;
  logic normal_and_error_interrupt_status_card_removal_qs;
  logic normal_and_error_interrupt_status_card_removal_wd;
  logic normal_and_error_interrupt_status_card_removal_we;
  logic normal_and_error_interrupt_status_card_interrupt_qs;
  logic [5:0] normal_and_error_interrupt_status_rsvd_14_qs;
  logic normal_and_error_interrupt_status_error_interrupt_qs;
  logic normal_and_error_interrupt_status_command_timeout_error_qs;
  logic normal_and_error_interrupt_status_command_timeout_error_wd;
  logic normal_and_error_interrupt_status_command_timeout_error_we;
  logic normal_and_error_interrupt_status_command_crc_error_qs;
  logic normal_and_error_interrupt_status_command_crc_error_wd;
  logic normal_and_error_interrupt_status_command_crc_error_we;
  logic normal_and_error_interrupt_status_command_end_bit_error_qs;
  logic normal_and_error_interrupt_status_command_end_bit_error_wd;
  logic normal_and_error_interrupt_status_command_end_bit_error_we;
  logic normal_and_error_interrupt_status_command_index_error_qs;
  logic normal_and_error_interrupt_status_command_index_error_wd;
  logic normal_and_error_interrupt_status_command_index_error_we;
  logic normal_and_error_interrupt_status_data_timeout_error_qs;
  logic normal_and_error_interrupt_status_data_timeout_error_wd;
  logic normal_and_error_interrupt_status_data_timeout_error_we;
  logic normal_and_error_interrupt_status_data_crc_error_qs;
  logic normal_and_error_interrupt_status_data_crc_error_wd;
  logic normal_and_error_interrupt_status_data_crc_error_we;
  logic normal_and_error_interrupt_status_data_end_bit_error_qs;
  logic normal_and_error_interrupt_status_data_end_bit_error_wd;
  logic normal_and_error_interrupt_status_data_end_bit_error_we;
  logic normal_and_error_interrupt_status_current_limit_error_qs;
  logic normal_and_error_interrupt_status_current_limit_error_wd;
  logic normal_and_error_interrupt_status_current_limit_error_we;
  logic normal_and_error_interrupt_status_auto_cmd12_error_qs;
  logic normal_and_error_interrupt_status_auto_cmd12_error_wd;
  logic normal_and_error_interrupt_status_auto_cmd12_error_we;
  logic [2:0] normal_and_error_interrupt_status_rsvd_27_qs;
  logic [3:0] normal_and_error_interrupt_status_vendor_specific_error_status_qs;
  logic [3:0] normal_and_error_interrupt_status_vendor_specific_error_status_wd;
  logic normal_and_error_interrupt_status_vendor_specific_error_status_we;
  logic normal_and_error_interrupt_status_enable_command_complete_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_command_complete_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_command_complete_status_enable_we;
  logic normal_and_error_interrupt_status_enable_transfer_complete_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_transfer_complete_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_transfer_complete_status_enable_we;
  logic normal_and_error_interrupt_status_enable_block_gap_event_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_block_gap_event_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_block_gap_event_status_enable_we;
  logic normal_and_error_interrupt_status_enable_dma_interrupt_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_dma_interrupt_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_dma_interrupt_status_enable_we;
  logic normal_and_error_interrupt_status_enable_buffer_write_ready_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_buffer_write_ready_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_buffer_write_ready_status_enable_we;
  logic normal_and_error_interrupt_status_enable_buffer_read_ready_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_buffer_read_ready_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_buffer_read_ready_status_enable_we;
  logic normal_and_error_interrupt_status_enable_card_insertion_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_card_insertion_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_card_insertion_status_enable_we;
  logic normal_and_error_interrupt_status_enable_card_removal_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_card_removal_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_card_removal_status_enable_we;
  logic normal_and_error_interrupt_status_enable_card_interrupt_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_card_interrupt_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_card_interrupt_status_enable_we;
  logic [5:0] normal_and_error_interrupt_status_enable_rsvd_14_qs;
  logic normal_and_error_interrupt_status_enable_fixed_to_0_qs;
  logic normal_and_error_interrupt_status_enable_command_timeout_error_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_command_timeout_error_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_command_timeout_error_status_enable_we;
  logic normal_and_error_interrupt_status_enable_command_crc_error_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_command_crc_error_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_command_crc_error_status_enable_we;
  logic normal_and_error_interrupt_status_enable_command_end_bit_error_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_command_end_bit_error_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_command_end_bit_error_status_enable_we;
  logic normal_and_error_interrupt_status_enable_command_index_error_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_command_index_error_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_command_index_error_status_enable_we;
  logic normal_and_error_interrupt_status_enable_data_timeout_error_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_data_timeout_error_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_data_timeout_error_status_enable_we;
  logic normal_and_error_interrupt_status_enable_data_crc_error_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_data_crc_error_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_data_crc_error_status_enable_we;
  logic normal_and_error_interrupt_status_enable_data_end_bit_error_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_data_end_bit_error_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_data_end_bit_error_status_enable_we;
  logic normal_and_error_interrupt_status_enable_current_limit_error_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_current_limit_error_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_current_limit_error_status_enable_we;
  logic normal_and_error_interrupt_status_enable_auto_cmd12_error_status_enable_qs;
  logic normal_and_error_interrupt_status_enable_auto_cmd12_error_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_auto_cmd12_error_status_enable_we;
  logic [2:0] normal_and_error_interrupt_status_enable_rsvd_27_qs;
  logic [3:0] normal_and_error_interrupt_status_enable_vendor_specific_error_status_enable_qs;
  logic [3:0] normal_and_error_interrupt_status_enable_vendor_specific_error_status_enable_wd;
  logic normal_and_error_interrupt_status_enable_vendor_specific_error_status_enable_we;
  logic normal_and_error_interrupt_signal_enable_command_complete_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_command_complete_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_command_complete_signal_enable_we;
  logic normal_and_error_interrupt_signal_enable_transfer_complete_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_transfer_complete_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_transfer_complete_signal_enable_we;
  logic normal_and_error_interrupt_signal_enable_block_gap_event_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_block_gap_event_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_block_gap_event_signal_enable_we;
  logic normal_and_error_interrupt_signal_enable_dma_interrupt_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_dma_interrupt_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_dma_interrupt_signal_enable_we;
  logic normal_and_error_interrupt_signal_enable_buffer_write_ready_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_buffer_write_ready_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_buffer_write_ready_signal_enable_we;
  logic normal_and_error_interrupt_signal_enable_buffer_read_ready_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_buffer_read_ready_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_buffer_read_ready_signal_enable_we;
  logic normal_and_error_interrupt_signal_enable_card_insertion_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_card_insertion_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_card_insertion_signal_enable_we;
  logic normal_and_error_interrupt_signal_enable_card_removal_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_card_removal_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_card_removal_signal_enable_we;
  logic normal_and_error_interrupt_signal_enable_card_interrupt_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_card_interrupt_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_card_interrupt_signal_enable_we;
  logic [5:0] normal_and_error_interrupt_signal_enable_rsvd_14_qs;
  logic normal_and_error_interrupt_signal_enable_fixed_to_0_qs;
  logic normal_and_error_interrupt_signal_enable_command_timeout_error_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_command_timeout_error_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_command_timeout_error_signal_enable_we;
  logic normal_and_error_interrupt_signal_enable_command_crc_error_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_command_crc_error_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_command_crc_error_signal_enable_we;
  logic normal_and_error_interrupt_signal_enable_command_end_bit_error_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_command_end_bit_error_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_command_end_bit_error_signal_enable_we;
  logic normal_and_error_interrupt_signal_enable_command_index_error_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_command_index_error_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_command_index_error_signal_enable_we;
  logic normal_and_error_interrupt_signal_enable_data_timeout_error_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_data_timeout_error_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_data_timeout_error_signal_enable_we;
  logic normal_and_error_interrupt_signal_enable_data_crc_error_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_data_crc_error_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_data_crc_error_signal_enable_we;
  logic normal_and_error_interrupt_signal_enable_data_end_bit_error_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_data_end_bit_error_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_data_end_bit_error_signal_enable_we;
  logic normal_and_error_interrupt_signal_enable_current_limit_error_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_current_limit_error_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_current_limit_error_signal_enable_we;
  logic normal_and_error_interrupt_signal_enable_auto_cmd12_error_signal_enable_qs;
  logic normal_and_error_interrupt_signal_enable_auto_cmd12_error_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_auto_cmd12_error_signal_enable_we;
  logic [2:0] normal_and_error_interrupt_signal_enable_rsvd_27_qs;
  logic [3:0] normal_and_error_interrupt_signal_enable_vendor_specific_error_signal_enable_qs;
  logic [3:0] normal_and_error_interrupt_signal_enable_vendor_specific_error_signal_enable_wd;
  logic normal_and_error_interrupt_signal_enable_vendor_specific_error_signal_enable_we;
  logic auto_cmd12_error_status_auto_cmd12_not_executed_qs;
  logic auto_cmd12_error_status_auto_cmd12_timeout_error_qs;
  logic auto_cmd12_error_status_auto_cmd12_crc_error_qs;
  logic auto_cmd12_error_status_auto_cmd12_end_bit_error_qs;
  logic auto_cmd12_error_status_auto_cmd12_index_error_qs;
  logic [1:0] auto_cmd12_error_status_rsvd_6_qs;
  logic auto_cmd12_error_status_command_not_issued_by_auto_cmd12_error_qs;
  logic [7:0] auto_cmd12_error_status_rsvd_15_qs;
  logic [5:0] capabilities_timeout_clock_frequency_qs;
  logic capabilities_rsvd_6_qs;
  logic capabilities_timeout_clock_unit_qs;
  logic [5:0] capabilities_base_clock_frequency_for_sd_clock_qs;
  logic [1:0] capabilities_rsvd_15_qs;
  logic [1:0] capabilities_max_block_length_qs;
  logic [2:0] capabilities_rsvd_20_qs;
  logic capabilities_high_speed_support_qs;
  logic capabilities_dma_support_qs;
  logic capabilities_suspend_resume_support_qs;
  logic capabilities_voltage_support_3_3v_qs;
  logic capabilities_voltage_support_3_0v_qs;
  logic capabilities_voltage_support_1_8v_qs;
  logic [4:0] capabilities_rsvd_63_qs;
  logic [7:0] maximum_current_capabilities_maximum_current_for_3_3v_qs;
  logic [7:0] maximum_current_capabilities_maximum_current_for_3_0v_qs;
  logic [7:0] maximum_current_capabilities_maximum_current_for_1_8v_qs;
  logic [7:0] maximum_current_capabilities_rsvd_63_qs;
  logic [7:0] slot_interrupt_status_and_host_controller_version_interrupt_signal_for_each_slot_qs;
  logic [7:0] slot_interrupt_status_and_host_controller_version_rsvd_15_qs;
  logic [7:0] slot_interrupt_status_and_host_controller_version_specification_version_number_qs;
  logic [7:0] slot_interrupt_status_and_host_controller_version_vendor_version_number_qs;

  // Register instances
  // R[system_address]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_system_address (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (system_address_we),
    .wd     (system_address_wd),

    // from internal hardware
    .de     (hw2reg.system_address.de),
    .d      (hw2reg.system_address.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.system_address.q ),

    // to register interface (read)
    .qs     (system_address_qs)
  );


  // R[block_size_and_count]: V(False)

  //   F[transfer_block_size]: 11:0
  prim_subreg #(
    .DW      (12),
    .SWACCESS("RW"),
    .RESVAL  (12'h0)
  ) u_block_size_and_count_transfer_block_size (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (block_size_and_count_transfer_block_size_we),
    .wd     (block_size_and_count_transfer_block_size_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.block_size_and_count.transfer_block_size.q ),

    // to register interface (read)
    .qs     (block_size_and_count_transfer_block_size_qs)
  );


  //   F[host_dma_buffer_boundary]: 14:12
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_block_size_and_count_host_dma_buffer_boundary (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (block_size_and_count_host_dma_buffer_boundary_we),
    .wd     (block_size_and_count_host_dma_buffer_boundary_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.block_size_and_count.host_dma_buffer_boundary.q ),

    // to register interface (read)
    .qs     (block_size_and_count_host_dma_buffer_boundary_qs)
  );


  //   F[rsvd_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_block_size_and_count_rsvd_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.block_size_and_count.rsvd_15.q ),

    // to register interface (read)
    .qs     (block_size_and_count_rsvd_15_qs)
  );


  //   F[blocks_count_for_current_transfer]: 31:16
  prim_subreg #(
    .DW      (16),
    .SWACCESS("RW"),
    .RESVAL  (16'h0)
  ) u_block_size_and_count_blocks_count_for_current_transfer (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (block_size_and_count_blocks_count_for_current_transfer_we),
    .wd     (block_size_and_count_blocks_count_for_current_transfer_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.block_size_and_count.blocks_count_for_current_transfer.q ),

    // to register interface (read)
    .qs     (block_size_and_count_blocks_count_for_current_transfer_qs)
  );


  // R[argument]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_argument (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (argument_we),
    .wd     (argument_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.argument.q ),

    // to register interface (read)
    .qs     (argument_qs)
  );


  // R[transfer_mode_and_command]: V(False)

  //   F[dma_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_transfer_mode_and_command_dma_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (transfer_mode_and_command_dma_enable_we),
    .wd     (transfer_mode_and_command_dma_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.transfer_mode_and_command.dma_enable.q ),

    // to register interface (read)
    .qs     (transfer_mode_and_command_dma_enable_qs)
  );


  //   F[block_count_enable]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_transfer_mode_and_command_block_count_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (transfer_mode_and_command_block_count_enable_we),
    .wd     (transfer_mode_and_command_block_count_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.transfer_mode_and_command.block_count_enable.q ),

    // to register interface (read)
    .qs     (transfer_mode_and_command_block_count_enable_qs)
  );


  //   F[auto_cmd12_enable]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_transfer_mode_and_command_auto_cmd12_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (transfer_mode_and_command_auto_cmd12_enable_we),
    .wd     (transfer_mode_and_command_auto_cmd12_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.transfer_mode_and_command.auto_cmd12_enable.q ),

    // to register interface (read)
    .qs     (transfer_mode_and_command_auto_cmd12_enable_qs)
  );


  //   F[rsvd_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_transfer_mode_and_command_rsvd_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.transfer_mode_and_command.rsvd_3.q ),

    // to register interface (read)
    .qs     (transfer_mode_and_command_rsvd_3_qs)
  );


  //   F[data_transfer_direction_select]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_transfer_mode_and_command_data_transfer_direction_select (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (transfer_mode_and_command_data_transfer_direction_select_we),
    .wd     (transfer_mode_and_command_data_transfer_direction_select_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.transfer_mode_and_command.data_transfer_direction_select.q ),

    // to register interface (read)
    .qs     (transfer_mode_and_command_data_transfer_direction_select_qs)
  );


  //   F[multi_single_bit_block_select]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_transfer_mode_and_command_multi_single_bit_block_select (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (transfer_mode_and_command_multi_single_bit_block_select_we),
    .wd     (transfer_mode_and_command_multi_single_bit_block_select_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.transfer_mode_and_command.multi_single_bit_block_select.q ),

    // to register interface (read)
    .qs     (transfer_mode_and_command_multi_single_bit_block_select_qs)
  );


  //   F[rsvd_15]: 15:6
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RO"),
    .RESVAL  (10'h0)
  ) u_transfer_mode_and_command_rsvd_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.transfer_mode_and_command.rsvd_15.q ),

    // to register interface (read)
    .qs     (transfer_mode_and_command_rsvd_15_qs)
  );


  //   F[response_type_select]: 17:16
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_transfer_mode_and_command_response_type_select (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (transfer_mode_and_command_response_type_select_we),
    .wd     (transfer_mode_and_command_response_type_select_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.transfer_mode_and_command.response_type_select.q ),

    // to register interface (read)
    .qs     (transfer_mode_and_command_response_type_select_qs)
  );


  //   F[rsvd_18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_transfer_mode_and_command_rsvd_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.transfer_mode_and_command.rsvd_18.q ),

    // to register interface (read)
    .qs     (transfer_mode_and_command_rsvd_18_qs)
  );


  //   F[command_crc_check_enable]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_transfer_mode_and_command_command_crc_check_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (transfer_mode_and_command_command_crc_check_enable_we),
    .wd     (transfer_mode_and_command_command_crc_check_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.transfer_mode_and_command.command_crc_check_enable.q ),

    // to register interface (read)
    .qs     (transfer_mode_and_command_command_crc_check_enable_qs)
  );


  //   F[command_index_check_enable]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_transfer_mode_and_command_command_index_check_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (transfer_mode_and_command_command_index_check_enable_we),
    .wd     (transfer_mode_and_command_command_index_check_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.transfer_mode_and_command.command_index_check_enable.q ),

    // to register interface (read)
    .qs     (transfer_mode_and_command_command_index_check_enable_qs)
  );


  //   F[data_present_select]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_transfer_mode_and_command_data_present_select (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (transfer_mode_and_command_data_present_select_we),
    .wd     (transfer_mode_and_command_data_present_select_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.transfer_mode_and_command.data_present_select.q ),

    // to register interface (read)
    .qs     (transfer_mode_and_command_data_present_select_qs)
  );


  //   F[command_type]: 23:22
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_transfer_mode_and_command_command_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (transfer_mode_and_command_command_type_we),
    .wd     (transfer_mode_and_command_command_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.transfer_mode_and_command.command_type.q ),

    // to register interface (read)
    .qs     (transfer_mode_and_command_command_type_qs)
  );


  //   F[command_index]: 29:24
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_transfer_mode_and_command_command_index (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (transfer_mode_and_command_command_index_we),
    .wd     (transfer_mode_and_command_command_index_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.transfer_mode_and_command.command_index.q ),

    // to register interface (read)
    .qs     (transfer_mode_and_command_command_index_qs)
  );


  //   F[rsvd_31]: 31:30
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RO"),
    .RESVAL  (2'h0)
  ) u_transfer_mode_and_command_rsvd_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.transfer_mode_and_command.rsvd_31.q ),

    // to register interface (read)
    .qs     (transfer_mode_and_command_rsvd_31_qs)
  );


  // R[response0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_response0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.response0.q ),

    // to register interface (read)
    .qs     (response0_qs)
  );


  // R[response1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_response1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.response1.q ),

    // to register interface (read)
    .qs     (response1_qs)
  );


  // R[response2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_response2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.response2.q ),

    // to register interface (read)
    .qs     (response2_qs)
  );


  // R[response3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_response3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.response3.q ),

    // to register interface (read)
    .qs     (response3_qs)
  );


  // R[buffer_data_port]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_buffer_data_port (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (buffer_data_port_we),
    .wd     (buffer_data_port_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.buffer_data_port.q ),

    // to register interface (read)
    .qs     (buffer_data_port_qs)
  );


  // R[present_state]: V(False)

  //   F[command_inhibit_cmd]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_present_state_command_inhibit_cmd (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.present_state.command_inhibit_cmd.q ),

    // to register interface (read)
    .qs     (present_state_command_inhibit_cmd_qs)
  );


  //   F[command_inhibit_dat]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_present_state_command_inhibit_dat (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.present_state.command_inhibit_dat.q ),

    // to register interface (read)
    .qs     (present_state_command_inhibit_dat_qs)
  );


  //   F[dat_line_active]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_present_state_dat_line_active (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.present_state.dat_line_active.q ),

    // to register interface (read)
    .qs     (present_state_dat_line_active_qs)
  );


  //   F[rsvd_7]: 7:3
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RO"),
    .RESVAL  (5'h0)
  ) u_present_state_rsvd_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.present_state.rsvd_7.q ),

    // to register interface (read)
    .qs     (present_state_rsvd_7_qs)
  );


  //   F[write_transfer_active]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_present_state_write_transfer_active (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.present_state.write_transfer_active.q ),

    // to register interface (read)
    .qs     (present_state_write_transfer_active_qs)
  );


  //   F[read_transfer_active]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_present_state_read_transfer_active (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.present_state.read_transfer_active.q ),

    // to register interface (read)
    .qs     (present_state_read_transfer_active_qs)
  );


  //   F[buffer_write_enable]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_present_state_buffer_write_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.present_state.buffer_write_enable.q ),

    // to register interface (read)
    .qs     (present_state_buffer_write_enable_qs)
  );


  //   F[buffer_read_enable]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_present_state_buffer_read_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.present_state.buffer_read_enable.q ),

    // to register interface (read)
    .qs     (present_state_buffer_read_enable_qs)
  );


  //   F[rsvd_15]: 15:12
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RO"),
    .RESVAL  (4'h0)
  ) u_present_state_rsvd_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.present_state.rsvd_15.q ),

    // to register interface (read)
    .qs     (present_state_rsvd_15_qs)
  );


  //   F[card_inserted]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_present_state_card_inserted (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.present_state.card_inserted.q ),

    // to register interface (read)
    .qs     (present_state_card_inserted_qs)
  );


  //   F[card_state_stable]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_present_state_card_state_stable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.present_state.card_state_stable.q ),

    // to register interface (read)
    .qs     (present_state_card_state_stable_qs)
  );


  //   F[card_detect_pin_level]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_present_state_card_detect_pin_level (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.present_state.card_detect_pin_level.q ),

    // to register interface (read)
    .qs     (present_state_card_detect_pin_level_qs)
  );


  //   F[write_protect_switch_pin_level]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_present_state_write_protect_switch_pin_level (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.present_state.write_protect_switch_pin_level.q ),

    // to register interface (read)
    .qs     (present_state_write_protect_switch_pin_level_qs)
  );


  //   F[dat_line_signal_level]: 23:20
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RO"),
    .RESVAL  (4'h0)
  ) u_present_state_dat_line_signal_level (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.present_state.dat_line_signal_level.q ),

    // to register interface (read)
    .qs     (present_state_dat_line_signal_level_qs)
  );


  //   F[cmd_line_signal_level]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_present_state_cmd_line_signal_level (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.present_state.cmd_line_signal_level.q ),

    // to register interface (read)
    .qs     (present_state_cmd_line_signal_level_qs)
  );


  //   F[rsvd_31]: 31:25
  prim_subreg #(
    .DW      (7),
    .SWACCESS("RO"),
    .RESVAL  (7'h0)
  ) u_present_state_rsvd_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.present_state.rsvd_31.q ),

    // to register interface (read)
    .qs     (present_state_rsvd_31_qs)
  );


  // R[host_and_power_and_block_gap_and_wakeup_control]: V(False)

  //   F[led_control]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_and_power_and_block_gap_and_wakeup_control_led_control (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_and_power_and_block_gap_and_wakeup_control_led_control_we),
    .wd     (host_and_power_and_block_gap_and_wakeup_control_led_control_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_and_power_and_block_gap_and_wakeup_control.led_control.q ),

    // to register interface (read)
    .qs     (host_and_power_and_block_gap_and_wakeup_control_led_control_qs)
  );


  //   F[data_transfer_width]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_and_power_and_block_gap_and_wakeup_control_data_transfer_width (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_and_power_and_block_gap_and_wakeup_control_data_transfer_width_we),
    .wd     (host_and_power_and_block_gap_and_wakeup_control_data_transfer_width_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_and_power_and_block_gap_and_wakeup_control.data_transfer_width.q ),

    // to register interface (read)
    .qs     (host_and_power_and_block_gap_and_wakeup_control_data_transfer_width_qs)
  );


  //   F[high_speed_enable]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_and_power_and_block_gap_and_wakeup_control_high_speed_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_and_power_and_block_gap_and_wakeup_control_high_speed_enable_we),
    .wd     (host_and_power_and_block_gap_and_wakeup_control_high_speed_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_and_power_and_block_gap_and_wakeup_control.high_speed_enable.q ),

    // to register interface (read)
    .qs     (host_and_power_and_block_gap_and_wakeup_control_high_speed_enable_qs)
  );


  //   F[rsvd_7]: 7:3
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RO"),
    .RESVAL  (5'h0)
  ) u_host_and_power_and_block_gap_and_wakeup_control_rsvd_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_and_power_and_block_gap_and_wakeup_control.rsvd_7.q ),

    // to register interface (read)
    .qs     (host_and_power_and_block_gap_and_wakeup_control_rsvd_7_qs)
  );


  //   F[sd_bus_power]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_and_power_and_block_gap_and_wakeup_control_sd_bus_power (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_and_power_and_block_gap_and_wakeup_control_sd_bus_power_we),
    .wd     (host_and_power_and_block_gap_and_wakeup_control_sd_bus_power_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_and_power_and_block_gap_and_wakeup_control.sd_bus_power.q ),

    // to register interface (read)
    .qs     (host_and_power_and_block_gap_and_wakeup_control_sd_bus_power_qs)
  );


  //   F[sd_bus_voltage_select]: 11:9
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_host_and_power_and_block_gap_and_wakeup_control_sd_bus_voltage_select (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_and_power_and_block_gap_and_wakeup_control_sd_bus_voltage_select_we),
    .wd     (host_and_power_and_block_gap_and_wakeup_control_sd_bus_voltage_select_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_and_power_and_block_gap_and_wakeup_control.sd_bus_voltage_select.q ),

    // to register interface (read)
    .qs     (host_and_power_and_block_gap_and_wakeup_control_sd_bus_voltage_select_qs)
  );


  //   F[rsvd_15]: 15:12
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RO"),
    .RESVAL  (4'h0)
  ) u_host_and_power_and_block_gap_and_wakeup_control_rsvd_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_and_power_and_block_gap_and_wakeup_control.rsvd_15.q ),

    // to register interface (read)
    .qs     (host_and_power_and_block_gap_and_wakeup_control_rsvd_15_qs)
  );


  //   F[stop_at_block_gap_request]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_and_power_and_block_gap_and_wakeup_control_stop_at_block_gap_request (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_and_power_and_block_gap_and_wakeup_control_stop_at_block_gap_request_we),
    .wd     (host_and_power_and_block_gap_and_wakeup_control_stop_at_block_gap_request_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_and_power_and_block_gap_and_wakeup_control.stop_at_block_gap_request.q ),

    // to register interface (read)
    .qs     (host_and_power_and_block_gap_and_wakeup_control_stop_at_block_gap_request_qs)
  );


  //   F[continue_request]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_host_and_power_and_block_gap_and_wakeup_control_continue_request (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_and_power_and_block_gap_and_wakeup_control_continue_request_we),
    .wd     (host_and_power_and_block_gap_and_wakeup_control_continue_request_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_and_power_and_block_gap_and_wakeup_control.continue_request.q ),

    // to register interface (read)
    .qs     (host_and_power_and_block_gap_and_wakeup_control_continue_request_qs)
  );


  //   F[read_wait_control]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_and_power_and_block_gap_and_wakeup_control_read_wait_control (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_and_power_and_block_gap_and_wakeup_control_read_wait_control_we),
    .wd     (host_and_power_and_block_gap_and_wakeup_control_read_wait_control_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_and_power_and_block_gap_and_wakeup_control.read_wait_control.q ),

    // to register interface (read)
    .qs     (host_and_power_and_block_gap_and_wakeup_control_read_wait_control_qs)
  );


  //   F[interrupt_at_block_gap]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_and_power_and_block_gap_and_wakeup_control_interrupt_at_block_gap (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_and_power_and_block_gap_and_wakeup_control_interrupt_at_block_gap_we),
    .wd     (host_and_power_and_block_gap_and_wakeup_control_interrupt_at_block_gap_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_and_power_and_block_gap_and_wakeup_control.interrupt_at_block_gap.q ),

    // to register interface (read)
    .qs     (host_and_power_and_block_gap_and_wakeup_control_interrupt_at_block_gap_qs)
  );


  //   F[rsvd_23]: 23:20
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RO"),
    .RESVAL  (4'h0)
  ) u_host_and_power_and_block_gap_and_wakeup_control_rsvd_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_and_power_and_block_gap_and_wakeup_control.rsvd_23.q ),

    // to register interface (read)
    .qs     (host_and_power_and_block_gap_and_wakeup_control_rsvd_23_qs)
  );


  //   F[wakeup_event_enable_on_card_interrupt]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_card_interrupt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_card_interrupt_we),
    .wd     (host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_card_interrupt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_and_power_and_block_gap_and_wakeup_control.wakeup_event_enable_on_card_interrupt.q ),

    // to register interface (read)
    .qs     (host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_card_interrupt_qs)
  );


  //   F[wakeup_event_enable_on_sd_card_insertion]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_insertion (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_insertion_we),
    .wd     (host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_insertion_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_and_power_and_block_gap_and_wakeup_control.wakeup_event_enable_on_sd_card_insertion.q ),

    // to register interface (read)
    .qs     (host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_insertion_qs)
  );


  //   F[wakeup_event_enable_on_sd_card_removal]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_removal (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_removal_we),
    .wd     (host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_removal_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_and_power_and_block_gap_and_wakeup_control.wakeup_event_enable_on_sd_card_removal.q ),

    // to register interface (read)
    .qs     (host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_removal_qs)
  );


  //   F[rsvd_31]: 31:27
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RO"),
    .RESVAL  (5'h0)
  ) u_host_and_power_and_block_gap_and_wakeup_control_rsvd_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_and_power_and_block_gap_and_wakeup_control.rsvd_31.q ),

    // to register interface (read)
    .qs     (host_and_power_and_block_gap_and_wakeup_control_rsvd_31_qs)
  );


  // R[clock_and_timeout_control_and_software_reset]: V(False)

  //   F[internal_clock_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_and_timeout_control_and_software_reset_internal_clock_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_and_timeout_control_and_software_reset_internal_clock_enable_we),
    .wd     (clock_and_timeout_control_and_software_reset_internal_clock_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_and_timeout_control_and_software_reset.internal_clock_enable.q ),

    // to register interface (read)
    .qs     (clock_and_timeout_control_and_software_reset_internal_clock_enable_qs)
  );


  //   F[internal_clock_stable]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_clock_and_timeout_control_and_software_reset_internal_clock_stable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_and_timeout_control_and_software_reset.internal_clock_stable.q ),

    // to register interface (read)
    .qs     (clock_and_timeout_control_and_software_reset_internal_clock_stable_qs)
  );


  //   F[sd_clock_enable]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_and_timeout_control_and_software_reset_sd_clock_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_and_timeout_control_and_software_reset_sd_clock_enable_we),
    .wd     (clock_and_timeout_control_and_software_reset_sd_clock_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_and_timeout_control_and_software_reset.sd_clock_enable.q ),

    // to register interface (read)
    .qs     (clock_and_timeout_control_and_software_reset_sd_clock_enable_qs)
  );


  //   F[rsvd_7]: 7:3
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RO"),
    .RESVAL  (5'h0)
  ) u_clock_and_timeout_control_and_software_reset_rsvd_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_and_timeout_control_and_software_reset.rsvd_7.q ),

    // to register interface (read)
    .qs     (clock_and_timeout_control_and_software_reset_rsvd_7_qs)
  );


  //   F[sdclk_frequency_select]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_and_timeout_control_and_software_reset_sdclk_frequency_select (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_and_timeout_control_and_software_reset_sdclk_frequency_select_we),
    .wd     (clock_and_timeout_control_and_software_reset_sdclk_frequency_select_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_and_timeout_control_and_software_reset.sdclk_frequency_select.q ),

    // to register interface (read)
    .qs     (clock_and_timeout_control_and_software_reset_sdclk_frequency_select_qs)
  );


  //   F[data_timeout_counter_value]: 19:16
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_clock_and_timeout_control_and_software_reset_data_timeout_counter_value (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_and_timeout_control_and_software_reset_data_timeout_counter_value_we),
    .wd     (clock_and_timeout_control_and_software_reset_data_timeout_counter_value_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_and_timeout_control_and_software_reset.data_timeout_counter_value.q ),

    // to register interface (read)
    .qs     (clock_and_timeout_control_and_software_reset_data_timeout_counter_value_qs)
  );


  //   F[rsvd_23]: 23:20
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RO"),
    .RESVAL  (4'h0)
  ) u_clock_and_timeout_control_and_software_reset_rsvd_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_and_timeout_control_and_software_reset.rsvd_23.q ),

    // to register interface (read)
    .qs     (clock_and_timeout_control_and_software_reset_rsvd_23_qs)
  );


  //   F[software_reset_for_all]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_clock_and_timeout_control_and_software_reset_software_reset_for_all (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_and_timeout_control_and_software_reset_software_reset_for_all_we),
    .wd     (clock_and_timeout_control_and_software_reset_software_reset_for_all_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_and_timeout_control_and_software_reset.software_reset_for_all.q ),

    // to register interface (read)
    .qs     (clock_and_timeout_control_and_software_reset_software_reset_for_all_qs)
  );


  //   F[software_reset_for_cmd_line]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_clock_and_timeout_control_and_software_reset_software_reset_for_cmd_line (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_and_timeout_control_and_software_reset_software_reset_for_cmd_line_we),
    .wd     (clock_and_timeout_control_and_software_reset_software_reset_for_cmd_line_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_and_timeout_control_and_software_reset.software_reset_for_cmd_line.q ),

    // to register interface (read)
    .qs     (clock_and_timeout_control_and_software_reset_software_reset_for_cmd_line_qs)
  );


  //   F[software_reset_for_dat_line]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1S"),
    .RESVAL  (1'h0)
  ) u_clock_and_timeout_control_and_software_reset_software_reset_for_dat_line (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_and_timeout_control_and_software_reset_software_reset_for_dat_line_we),
    .wd     (clock_and_timeout_control_and_software_reset_software_reset_for_dat_line_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_and_timeout_control_and_software_reset.software_reset_for_dat_line.q ),

    // to register interface (read)
    .qs     (clock_and_timeout_control_and_software_reset_software_reset_for_dat_line_qs)
  );


  //   F[rsvd_31]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RO"),
    .RESVAL  (4'h0)
  ) u_clock_and_timeout_control_and_software_reset_rsvd_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_and_timeout_control_and_software_reset.rsvd_31.q ),

    // to register interface (read)
    .qs     (clock_and_timeout_control_and_software_reset_rsvd_31_qs)
  );


  // R[normal_and_error_interrupt_status]: V(False)

  //   F[command_complete]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_command_complete (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_command_complete_we),
    .wd     (normal_and_error_interrupt_status_command_complete_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.command_complete.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_command_complete_qs)
  );


  //   F[transfer_complete]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_transfer_complete (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_transfer_complete_we),
    .wd     (normal_and_error_interrupt_status_transfer_complete_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.transfer_complete.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_transfer_complete_qs)
  );


  //   F[block_gap_event]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_block_gap_event (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_block_gap_event_we),
    .wd     (normal_and_error_interrupt_status_block_gap_event_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.block_gap_event.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_block_gap_event_qs)
  );


  //   F[dma_interrupt]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_dma_interrupt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_dma_interrupt_we),
    .wd     (normal_and_error_interrupt_status_dma_interrupt_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.dma_interrupt.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_dma_interrupt_qs)
  );


  //   F[buffer_write_ready]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_buffer_write_ready (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_buffer_write_ready_we),
    .wd     (normal_and_error_interrupt_status_buffer_write_ready_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.buffer_write_ready.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_buffer_write_ready_qs)
  );


  //   F[buffer_read_ready]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_buffer_read_ready (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_buffer_read_ready_we),
    .wd     (normal_and_error_interrupt_status_buffer_read_ready_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.buffer_read_ready.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_buffer_read_ready_qs)
  );


  //   F[card_insertion]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_card_insertion (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_card_insertion_we),
    .wd     (normal_and_error_interrupt_status_card_insertion_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.card_insertion.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_card_insertion_qs)
  );


  //   F[card_removal]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_card_removal (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_card_removal_we),
    .wd     (normal_and_error_interrupt_status_card_removal_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.card_removal.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_card_removal_qs)
  );


  //   F[card_interrupt]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_card_interrupt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.card_interrupt.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_card_interrupt_qs)
  );


  //   F[rsvd_14]: 14:9
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RO"),
    .RESVAL  (6'h0)
  ) u_normal_and_error_interrupt_status_rsvd_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.rsvd_14.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_rsvd_14_qs)
  );


  //   F[error_interrupt]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_error_interrupt (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.error_interrupt.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_error_interrupt_qs)
  );


  //   F[command_timeout_error]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_command_timeout_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_command_timeout_error_we),
    .wd     (normal_and_error_interrupt_status_command_timeout_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.command_timeout_error.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_command_timeout_error_qs)
  );


  //   F[command_crc_error]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_command_crc_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_command_crc_error_we),
    .wd     (normal_and_error_interrupt_status_command_crc_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.command_crc_error.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_command_crc_error_qs)
  );


  //   F[command_end_bit_error]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_command_end_bit_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_command_end_bit_error_we),
    .wd     (normal_and_error_interrupt_status_command_end_bit_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.command_end_bit_error.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_command_end_bit_error_qs)
  );


  //   F[command_index_error]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_command_index_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_command_index_error_we),
    .wd     (normal_and_error_interrupt_status_command_index_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.command_index_error.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_command_index_error_qs)
  );


  //   F[data_timeout_error]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_data_timeout_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_data_timeout_error_we),
    .wd     (normal_and_error_interrupt_status_data_timeout_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.data_timeout_error.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_data_timeout_error_qs)
  );


  //   F[data_crc_error]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_data_crc_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_data_crc_error_we),
    .wd     (normal_and_error_interrupt_status_data_crc_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.data_crc_error.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_data_crc_error_qs)
  );


  //   F[data_end_bit_error]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_data_end_bit_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_data_end_bit_error_we),
    .wd     (normal_and_error_interrupt_status_data_end_bit_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.data_end_bit_error.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_data_end_bit_error_qs)
  );


  //   F[current_limit_error]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_current_limit_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_current_limit_error_we),
    .wd     (normal_and_error_interrupt_status_current_limit_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.current_limit_error.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_current_limit_error_qs)
  );


  //   F[auto_cmd12_error]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_auto_cmd12_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_auto_cmd12_error_we),
    .wd     (normal_and_error_interrupt_status_auto_cmd12_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.auto_cmd12_error.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_auto_cmd12_error_qs)
  );


  //   F[rsvd_27]: 27:25
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RO"),
    .RESVAL  (3'h0)
  ) u_normal_and_error_interrupt_status_rsvd_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.rsvd_27.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_rsvd_27_qs)
  );


  //   F[vendor_specific_error_status]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("W1C"),
    .RESVAL  (4'h0)
  ) u_normal_and_error_interrupt_status_vendor_specific_error_status (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_vendor_specific_error_status_we),
    .wd     (normal_and_error_interrupt_status_vendor_specific_error_status_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status.vendor_specific_error_status.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_vendor_specific_error_status_qs)
  );


  // R[normal_and_error_interrupt_status_enable]: V(False)

  //   F[command_complete_status_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_command_complete_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_command_complete_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_command_complete_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.command_complete_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_command_complete_status_enable_qs)
  );


  //   F[transfer_complete_status_enable]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_transfer_complete_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_transfer_complete_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_transfer_complete_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.transfer_complete_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_transfer_complete_status_enable_qs)
  );


  //   F[block_gap_event_status_enable]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_block_gap_event_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_block_gap_event_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_block_gap_event_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.block_gap_event_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_block_gap_event_status_enable_qs)
  );


  //   F[dma_interrupt_status_enable]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_dma_interrupt_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_dma_interrupt_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_dma_interrupt_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.dma_interrupt_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_dma_interrupt_status_enable_qs)
  );


  //   F[buffer_write_ready_status_enable]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_buffer_write_ready_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_buffer_write_ready_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_buffer_write_ready_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.buffer_write_ready_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_buffer_write_ready_status_enable_qs)
  );


  //   F[buffer_read_ready_status_enable]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_buffer_read_ready_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_buffer_read_ready_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_buffer_read_ready_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.buffer_read_ready_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_buffer_read_ready_status_enable_qs)
  );


  //   F[card_insertion_status_enable]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_card_insertion_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_card_insertion_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_card_insertion_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.card_insertion_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_card_insertion_status_enable_qs)
  );


  //   F[card_removal_status_enable]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_card_removal_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_card_removal_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_card_removal_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.card_removal_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_card_removal_status_enable_qs)
  );


  //   F[card_interrupt_status_enable]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_card_interrupt_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_card_interrupt_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_card_interrupt_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.card_interrupt_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_card_interrupt_status_enable_qs)
  );


  //   F[rsvd_14]: 14:9
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RO"),
    .RESVAL  (6'h0)
  ) u_normal_and_error_interrupt_status_enable_rsvd_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.rsvd_14.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_rsvd_14_qs)
  );


  //   F[fixed_to_0]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_fixed_to_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.fixed_to_0.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_fixed_to_0_qs)
  );


  //   F[command_timeout_error_status_enable]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_command_timeout_error_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_command_timeout_error_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_command_timeout_error_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.command_timeout_error_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_command_timeout_error_status_enable_qs)
  );


  //   F[command_crc_error_status_enable]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_command_crc_error_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_command_crc_error_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_command_crc_error_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.command_crc_error_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_command_crc_error_status_enable_qs)
  );


  //   F[command_end_bit_error_status_enable]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_command_end_bit_error_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_command_end_bit_error_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_command_end_bit_error_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.command_end_bit_error_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_command_end_bit_error_status_enable_qs)
  );


  //   F[command_index_error_status_enable]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_command_index_error_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_command_index_error_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_command_index_error_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.command_index_error_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_command_index_error_status_enable_qs)
  );


  //   F[data_timeout_error_status_enable]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_data_timeout_error_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_data_timeout_error_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_data_timeout_error_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.data_timeout_error_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_data_timeout_error_status_enable_qs)
  );


  //   F[data_crc_error_status_enable]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_data_crc_error_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_data_crc_error_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_data_crc_error_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.data_crc_error_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_data_crc_error_status_enable_qs)
  );


  //   F[data_end_bit_error_status_enable]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_data_end_bit_error_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_data_end_bit_error_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_data_end_bit_error_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.data_end_bit_error_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_data_end_bit_error_status_enable_qs)
  );


  //   F[current_limit_error_status_enable]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_current_limit_error_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_current_limit_error_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_current_limit_error_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.current_limit_error_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_current_limit_error_status_enable_qs)
  );


  //   F[auto_cmd12_error_status_enable]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_status_enable_auto_cmd12_error_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_auto_cmd12_error_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_auto_cmd12_error_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.auto_cmd12_error_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_auto_cmd12_error_status_enable_qs)
  );


  //   F[rsvd_27]: 27:25
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RO"),
    .RESVAL  (3'h0)
  ) u_normal_and_error_interrupt_status_enable_rsvd_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.rsvd_27.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_rsvd_27_qs)
  );


  //   F[vendor_specific_error_status_enable]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_normal_and_error_interrupt_status_enable_vendor_specific_error_status_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_status_enable_vendor_specific_error_status_enable_we),
    .wd     (normal_and_error_interrupt_status_enable_vendor_specific_error_status_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_status_enable.vendor_specific_error_status_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_status_enable_vendor_specific_error_status_enable_qs)
  );


  // R[normal_and_error_interrupt_signal_enable]: V(False)

  //   F[command_complete_signal_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_command_complete_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_command_complete_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_command_complete_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.command_complete_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_command_complete_signal_enable_qs)
  );


  //   F[transfer_complete_signal_enable]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_transfer_complete_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_transfer_complete_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_transfer_complete_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.transfer_complete_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_transfer_complete_signal_enable_qs)
  );


  //   F[block_gap_event_signal_enable]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_block_gap_event_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_block_gap_event_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_block_gap_event_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.block_gap_event_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_block_gap_event_signal_enable_qs)
  );


  //   F[dma_interrupt_signal_enable]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_dma_interrupt_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_dma_interrupt_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_dma_interrupt_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.dma_interrupt_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_dma_interrupt_signal_enable_qs)
  );


  //   F[buffer_write_ready_signal_enable]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_buffer_write_ready_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_buffer_write_ready_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_buffer_write_ready_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.buffer_write_ready_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_buffer_write_ready_signal_enable_qs)
  );


  //   F[buffer_read_ready_signal_enable]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_buffer_read_ready_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_buffer_read_ready_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_buffer_read_ready_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.buffer_read_ready_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_buffer_read_ready_signal_enable_qs)
  );


  //   F[card_insertion_signal_enable]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_card_insertion_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_card_insertion_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_card_insertion_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.card_insertion_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_card_insertion_signal_enable_qs)
  );


  //   F[card_removal_signal_enable]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_card_removal_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_card_removal_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_card_removal_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.card_removal_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_card_removal_signal_enable_qs)
  );


  //   F[card_interrupt_signal_enable]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_card_interrupt_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_card_interrupt_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_card_interrupt_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.card_interrupt_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_card_interrupt_signal_enable_qs)
  );


  //   F[rsvd_14]: 14:9
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RO"),
    .RESVAL  (6'h0)
  ) u_normal_and_error_interrupt_signal_enable_rsvd_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.rsvd_14.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_rsvd_14_qs)
  );


  //   F[fixed_to_0]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_fixed_to_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.fixed_to_0.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_fixed_to_0_qs)
  );


  //   F[command_timeout_error_signal_enable]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_command_timeout_error_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_command_timeout_error_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_command_timeout_error_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.command_timeout_error_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_command_timeout_error_signal_enable_qs)
  );


  //   F[command_crc_error_signal_enable]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_command_crc_error_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_command_crc_error_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_command_crc_error_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.command_crc_error_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_command_crc_error_signal_enable_qs)
  );


  //   F[command_end_bit_error_signal_enable]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_command_end_bit_error_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_command_end_bit_error_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_command_end_bit_error_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.command_end_bit_error_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_command_end_bit_error_signal_enable_qs)
  );


  //   F[command_index_error_signal_enable]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_command_index_error_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_command_index_error_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_command_index_error_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.command_index_error_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_command_index_error_signal_enable_qs)
  );


  //   F[data_timeout_error_signal_enable]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_data_timeout_error_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_data_timeout_error_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_data_timeout_error_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.data_timeout_error_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_data_timeout_error_signal_enable_qs)
  );


  //   F[data_crc_error_signal_enable]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_data_crc_error_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_data_crc_error_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_data_crc_error_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.data_crc_error_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_data_crc_error_signal_enable_qs)
  );


  //   F[data_end_bit_error_signal_enable]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_data_end_bit_error_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_data_end_bit_error_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_data_end_bit_error_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.data_end_bit_error_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_data_end_bit_error_signal_enable_qs)
  );


  //   F[current_limit_error_signal_enable]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_current_limit_error_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_current_limit_error_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_current_limit_error_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.current_limit_error_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_current_limit_error_signal_enable_qs)
  );


  //   F[auto_cmd12_error_signal_enable]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_normal_and_error_interrupt_signal_enable_auto_cmd12_error_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_auto_cmd12_error_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_auto_cmd12_error_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.auto_cmd12_error_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_auto_cmd12_error_signal_enable_qs)
  );


  //   F[rsvd_27]: 27:25
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RO"),
    .RESVAL  (3'h0)
  ) u_normal_and_error_interrupt_signal_enable_rsvd_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.rsvd_27.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_rsvd_27_qs)
  );


  //   F[vendor_specific_error_signal_enable]: 31:28
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_normal_and_error_interrupt_signal_enable_vendor_specific_error_signal_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (normal_and_error_interrupt_signal_enable_vendor_specific_error_signal_enable_we),
    .wd     (normal_and_error_interrupt_signal_enable_vendor_specific_error_signal_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.normal_and_error_interrupt_signal_enable.vendor_specific_error_signal_enable.q ),

    // to register interface (read)
    .qs     (normal_and_error_interrupt_signal_enable_vendor_specific_error_signal_enable_qs)
  );


  // R[auto_cmd12_error_status]: V(False)

  //   F[auto_cmd12_not_executed]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_auto_cmd12_error_status_auto_cmd12_not_executed (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.auto_cmd12_error_status.auto_cmd12_not_executed.q ),

    // to register interface (read)
    .qs     (auto_cmd12_error_status_auto_cmd12_not_executed_qs)
  );


  //   F[auto_cmd12_timeout_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_auto_cmd12_error_status_auto_cmd12_timeout_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.auto_cmd12_error_status.auto_cmd12_timeout_error.q ),

    // to register interface (read)
    .qs     (auto_cmd12_error_status_auto_cmd12_timeout_error_qs)
  );


  //   F[auto_cmd12_crc_error]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_auto_cmd12_error_status_auto_cmd12_crc_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.auto_cmd12_error_status.auto_cmd12_crc_error.q ),

    // to register interface (read)
    .qs     (auto_cmd12_error_status_auto_cmd12_crc_error_qs)
  );


  //   F[auto_cmd12_end_bit_error]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_auto_cmd12_error_status_auto_cmd12_end_bit_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.auto_cmd12_error_status.auto_cmd12_end_bit_error.q ),

    // to register interface (read)
    .qs     (auto_cmd12_error_status_auto_cmd12_end_bit_error_qs)
  );


  //   F[auto_cmd12_index_error]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_auto_cmd12_error_status_auto_cmd12_index_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.auto_cmd12_error_status.auto_cmd12_index_error.q ),

    // to register interface (read)
    .qs     (auto_cmd12_error_status_auto_cmd12_index_error_qs)
  );


  //   F[rsvd_6]: 6:5
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RO"),
    .RESVAL  (2'h0)
  ) u_auto_cmd12_error_status_rsvd_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.auto_cmd12_error_status.rsvd_6.q ),

    // to register interface (read)
    .qs     (auto_cmd12_error_status_rsvd_6_qs)
  );


  //   F[command_not_issued_by_auto_cmd12_error]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_auto_cmd12_error_status_command_not_issued_by_auto_cmd12_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.auto_cmd12_error_status.command_not_issued_by_auto_cmd12_error.q ),

    // to register interface (read)
    .qs     (auto_cmd12_error_status_command_not_issued_by_auto_cmd12_error_qs)
  );


  //   F[rsvd_15]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RO"),
    .RESVAL  (8'h0)
  ) u_auto_cmd12_error_status_rsvd_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.auto_cmd12_error_status.rsvd_15.q ),

    // to register interface (read)
    .qs     (auto_cmd12_error_status_rsvd_15_qs)
  );


  // R[capabilities]: V(False)

  //   F[timeout_clock_frequency]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RO"),
    .RESVAL  (6'h0)
  ) u_capabilities_timeout_clock_frequency (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.capabilities.timeout_clock_frequency.q ),

    // to register interface (read)
    .qs     (capabilities_timeout_clock_frequency_qs)
  );


  //   F[rsvd_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_capabilities_rsvd_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.capabilities.rsvd_6.q ),

    // to register interface (read)
    .qs     (capabilities_rsvd_6_qs)
  );


  //   F[timeout_clock_unit]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_capabilities_timeout_clock_unit (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.capabilities.timeout_clock_unit.q ),

    // to register interface (read)
    .qs     (capabilities_timeout_clock_unit_qs)
  );


  //   F[base_clock_frequency_for_sd_clock]: 13:8
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RO"),
    .RESVAL  (6'h0)
  ) u_capabilities_base_clock_frequency_for_sd_clock (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.capabilities.base_clock_frequency_for_sd_clock.q ),

    // to register interface (read)
    .qs     (capabilities_base_clock_frequency_for_sd_clock_qs)
  );


  //   F[rsvd_15]: 15:14
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RO"),
    .RESVAL  (2'h0)
  ) u_capabilities_rsvd_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.capabilities.rsvd_15.q ),

    // to register interface (read)
    .qs     (capabilities_rsvd_15_qs)
  );


  //   F[max_block_length]: 17:16
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RO"),
    .RESVAL  (2'h0)
  ) u_capabilities_max_block_length (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.capabilities.max_block_length.q ),

    // to register interface (read)
    .qs     (capabilities_max_block_length_qs)
  );


  //   F[rsvd_20]: 20:18
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RO"),
    .RESVAL  (3'h0)
  ) u_capabilities_rsvd_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.capabilities.rsvd_20.q ),

    // to register interface (read)
    .qs     (capabilities_rsvd_20_qs)
  );


  //   F[high_speed_support]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_capabilities_high_speed_support (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.capabilities.high_speed_support.q ),

    // to register interface (read)
    .qs     (capabilities_high_speed_support_qs)
  );


  //   F[dma_support]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_capabilities_dma_support (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.capabilities.dma_support.q ),

    // to register interface (read)
    .qs     (capabilities_dma_support_qs)
  );


  //   F[suspend_resume_support]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_capabilities_suspend_resume_support (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.capabilities.suspend_resume_support.q ),

    // to register interface (read)
    .qs     (capabilities_suspend_resume_support_qs)
  );


  //   F[voltage_support_3_3v]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_capabilities_voltage_support_3_3v (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.capabilities.voltage_support_3_3v.q ),

    // to register interface (read)
    .qs     (capabilities_voltage_support_3_3v_qs)
  );


  //   F[voltage_support_3_0v]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_capabilities_voltage_support_3_0v (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.capabilities.voltage_support_3_0v.q ),

    // to register interface (read)
    .qs     (capabilities_voltage_support_3_0v_qs)
  );


  //   F[voltage_support_1_8v]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_capabilities_voltage_support_1_8v (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.capabilities.voltage_support_1_8v.q ),

    // to register interface (read)
    .qs     (capabilities_voltage_support_1_8v_qs)
  );


  //   F[rsvd_63]: 31:27
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RO"),
    .RESVAL  (5'h0)
  ) u_capabilities_rsvd_63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.capabilities.rsvd_63.q ),

    // to register interface (read)
    .qs     (capabilities_rsvd_63_qs)
  );


  // R[maximum_current_capabilities]: V(False)

  //   F[maximum_current_for_3_3v]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RO"),
    .RESVAL  (8'h0)
  ) u_maximum_current_capabilities_maximum_current_for_3_3v (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.maximum_current_capabilities.maximum_current_for_3_3v.q ),

    // to register interface (read)
    .qs     (maximum_current_capabilities_maximum_current_for_3_3v_qs)
  );


  //   F[maximum_current_for_3_0v]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RO"),
    .RESVAL  (8'h0)
  ) u_maximum_current_capabilities_maximum_current_for_3_0v (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.maximum_current_capabilities.maximum_current_for_3_0v.q ),

    // to register interface (read)
    .qs     (maximum_current_capabilities_maximum_current_for_3_0v_qs)
  );


  //   F[maximum_current_for_1_8v]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RO"),
    .RESVAL  (8'h0)
  ) u_maximum_current_capabilities_maximum_current_for_1_8v (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.maximum_current_capabilities.maximum_current_for_1_8v.q ),

    // to register interface (read)
    .qs     (maximum_current_capabilities_maximum_current_for_1_8v_qs)
  );


  //   F[rsvd_63]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RO"),
    .RESVAL  (8'h0)
  ) u_maximum_current_capabilities_rsvd_63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.maximum_current_capabilities.rsvd_63.q ),

    // to register interface (read)
    .qs     (maximum_current_capabilities_rsvd_63_qs)
  );


  // R[slot_interrupt_status_and_host_controller_version]: V(False)

  //   F[interrupt_signal_for_each_slot]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RO"),
    .RESVAL  (8'h0)
  ) u_slot_interrupt_status_and_host_controller_version_interrupt_signal_for_each_slot (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.slot_interrupt_status_and_host_controller_version.interrupt_signal_for_each_slot.q ),

    // to register interface (read)
    .qs     (slot_interrupt_status_and_host_controller_version_interrupt_signal_for_each_slot_qs)
  );


  //   F[rsvd_15]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RO"),
    .RESVAL  (8'h0)
  ) u_slot_interrupt_status_and_host_controller_version_rsvd_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.slot_interrupt_status_and_host_controller_version.rsvd_15.q ),

    // to register interface (read)
    .qs     (slot_interrupt_status_and_host_controller_version_rsvd_15_qs)
  );


  //   F[specification_version_number]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RO"),
    .RESVAL  (8'h0)
  ) u_slot_interrupt_status_and_host_controller_version_specification_version_number (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.slot_interrupt_status_and_host_controller_version.specification_version_number.q ),

    // to register interface (read)
    .qs     (slot_interrupt_status_and_host_controller_version_specification_version_number_qs)
  );


  //   F[vendor_version_number]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RO"),
    .RESVAL  (8'h0)
  ) u_slot_interrupt_status_and_host_controller_version_vendor_version_number (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.slot_interrupt_status_and_host_controller_version.vendor_version_number.q ),

    // to register interface (read)
    .qs     (slot_interrupt_status_and_host_controller_version_vendor_version_number_qs)
  );




  logic [18:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == SDHCI_SYSTEM_ADDRESS_OFFSET);
    addr_hit[ 1] = (reg_addr == SDHCI_BLOCK_SIZE_AND_COUNT_OFFSET);
    addr_hit[ 2] = (reg_addr == SDHCI_ARGUMENT_OFFSET);
    addr_hit[ 3] = (reg_addr == SDHCI_TRANSFER_MODE_AND_COMMAND_OFFSET);
    addr_hit[ 4] = (reg_addr == SDHCI_RESPONSE0_OFFSET);
    addr_hit[ 5] = (reg_addr == SDHCI_RESPONSE1_OFFSET);
    addr_hit[ 6] = (reg_addr == SDHCI_RESPONSE2_OFFSET);
    addr_hit[ 7] = (reg_addr == SDHCI_RESPONSE3_OFFSET);
    addr_hit[ 8] = (reg_addr == SDHCI_BUFFER_DATA_PORT_OFFSET);
    addr_hit[ 9] = (reg_addr == SDHCI_PRESENT_STATE_OFFSET);
    addr_hit[10] = (reg_addr == SDHCI_HOST_AND_POWER_AND_BLOCK_GAP_AND_WAKEUP_CONTROL_OFFSET);
    addr_hit[11] = (reg_addr == SDHCI_CLOCK_AND_TIMEOUT_CONTROL_AND_SOFTWARE_RESET_OFFSET);
    addr_hit[12] = (reg_addr == SDHCI_NORMAL_AND_ERROR_INTERRUPT_STATUS_OFFSET);
    addr_hit[13] = (reg_addr == SDHCI_NORMAL_AND_ERROR_INTERRUPT_STATUS_ENABLE_OFFSET);
    addr_hit[14] = (reg_addr == SDHCI_NORMAL_AND_ERROR_INTERRUPT_SIGNAL_ENABLE_OFFSET);
    addr_hit[15] = (reg_addr == SDHCI_AUTO_CMD12_ERROR_STATUS_OFFSET);
    addr_hit[16] = (reg_addr == SDHCI_CAPABILITIES_OFFSET);
    addr_hit[17] = (reg_addr == SDHCI_MAXIMUM_CURRENT_CAPABILITIES_OFFSET);
    addr_hit[18] = (reg_addr == SDHCI_SLOT_INTERRUPT_STATUS_AND_HOST_CONTROLLER_VERSION_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(SDHCI_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(SDHCI_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(SDHCI_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(SDHCI_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(SDHCI_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(SDHCI_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(SDHCI_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(SDHCI_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(SDHCI_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(SDHCI_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(SDHCI_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(SDHCI_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(SDHCI_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(SDHCI_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(SDHCI_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(SDHCI_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(SDHCI_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(SDHCI_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(SDHCI_PERMIT[18] & ~reg_be)))));
  end

  assign system_address_we = addr_hit[0] & reg_we & !reg_error;
  assign system_address_wd = reg_wdata[31:0];

  assign block_size_and_count_transfer_block_size_we = addr_hit[1] & reg_we & !reg_error;
  assign block_size_and_count_transfer_block_size_wd = reg_wdata[11:0];

  assign block_size_and_count_host_dma_buffer_boundary_we = addr_hit[1] & reg_we & !reg_error;
  assign block_size_and_count_host_dma_buffer_boundary_wd = reg_wdata[14:12];

  assign block_size_and_count_blocks_count_for_current_transfer_we = addr_hit[1] & reg_we & !reg_error;
  assign block_size_and_count_blocks_count_for_current_transfer_wd = reg_wdata[31:16];

  assign argument_we = addr_hit[2] & reg_we & !reg_error;
  assign argument_wd = reg_wdata[31:0];

  assign transfer_mode_and_command_dma_enable_we = addr_hit[3] & reg_we & !reg_error;
  assign transfer_mode_and_command_dma_enable_wd = reg_wdata[0];

  assign transfer_mode_and_command_block_count_enable_we = addr_hit[3] & reg_we & !reg_error;
  assign transfer_mode_and_command_block_count_enable_wd = reg_wdata[1];

  assign transfer_mode_and_command_auto_cmd12_enable_we = addr_hit[3] & reg_we & !reg_error;
  assign transfer_mode_and_command_auto_cmd12_enable_wd = reg_wdata[2];

  assign transfer_mode_and_command_data_transfer_direction_select_we = addr_hit[3] & reg_we & !reg_error;
  assign transfer_mode_and_command_data_transfer_direction_select_wd = reg_wdata[4];

  assign transfer_mode_and_command_multi_single_bit_block_select_we = addr_hit[3] & reg_we & !reg_error;
  assign transfer_mode_and_command_multi_single_bit_block_select_wd = reg_wdata[5];

  assign transfer_mode_and_command_response_type_select_we = addr_hit[3] & reg_we & !reg_error;
  assign transfer_mode_and_command_response_type_select_wd = reg_wdata[17:16];

  assign transfer_mode_and_command_command_crc_check_enable_we = addr_hit[3] & reg_we & !reg_error;
  assign transfer_mode_and_command_command_crc_check_enable_wd = reg_wdata[19];

  assign transfer_mode_and_command_command_index_check_enable_we = addr_hit[3] & reg_we & !reg_error;
  assign transfer_mode_and_command_command_index_check_enable_wd = reg_wdata[20];

  assign transfer_mode_and_command_data_present_select_we = addr_hit[3] & reg_we & !reg_error;
  assign transfer_mode_and_command_data_present_select_wd = reg_wdata[21];

  assign transfer_mode_and_command_command_type_we = addr_hit[3] & reg_we & !reg_error;
  assign transfer_mode_and_command_command_type_wd = reg_wdata[23:22];

  assign transfer_mode_and_command_command_index_we = addr_hit[3] & reg_we & !reg_error;
  assign transfer_mode_and_command_command_index_wd = reg_wdata[29:24];

  assign buffer_data_port_we = addr_hit[8] & reg_we & !reg_error;
  assign buffer_data_port_wd = reg_wdata[31:0];

  assign host_and_power_and_block_gap_and_wakeup_control_led_control_we = addr_hit[10] & reg_we & !reg_error;
  assign host_and_power_and_block_gap_and_wakeup_control_led_control_wd = reg_wdata[0];

  assign host_and_power_and_block_gap_and_wakeup_control_data_transfer_width_we = addr_hit[10] & reg_we & !reg_error;
  assign host_and_power_and_block_gap_and_wakeup_control_data_transfer_width_wd = reg_wdata[1];

  assign host_and_power_and_block_gap_and_wakeup_control_high_speed_enable_we = addr_hit[10] & reg_we & !reg_error;
  assign host_and_power_and_block_gap_and_wakeup_control_high_speed_enable_wd = reg_wdata[2];

  assign host_and_power_and_block_gap_and_wakeup_control_sd_bus_power_we = addr_hit[10] & reg_we & !reg_error;
  assign host_and_power_and_block_gap_and_wakeup_control_sd_bus_power_wd = reg_wdata[8];

  assign host_and_power_and_block_gap_and_wakeup_control_sd_bus_voltage_select_we = addr_hit[10] & reg_we & !reg_error;
  assign host_and_power_and_block_gap_and_wakeup_control_sd_bus_voltage_select_wd = reg_wdata[11:9];

  assign host_and_power_and_block_gap_and_wakeup_control_stop_at_block_gap_request_we = addr_hit[10] & reg_we & !reg_error;
  assign host_and_power_and_block_gap_and_wakeup_control_stop_at_block_gap_request_wd = reg_wdata[16];

  assign host_and_power_and_block_gap_and_wakeup_control_continue_request_we = addr_hit[10] & reg_we & !reg_error;
  assign host_and_power_and_block_gap_and_wakeup_control_continue_request_wd = reg_wdata[17];

  assign host_and_power_and_block_gap_and_wakeup_control_read_wait_control_we = addr_hit[10] & reg_we & !reg_error;
  assign host_and_power_and_block_gap_and_wakeup_control_read_wait_control_wd = reg_wdata[18];

  assign host_and_power_and_block_gap_and_wakeup_control_interrupt_at_block_gap_we = addr_hit[10] & reg_we & !reg_error;
  assign host_and_power_and_block_gap_and_wakeup_control_interrupt_at_block_gap_wd = reg_wdata[19];

  assign host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_card_interrupt_we = addr_hit[10] & reg_we & !reg_error;
  assign host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_card_interrupt_wd = reg_wdata[24];

  assign host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_insertion_we = addr_hit[10] & reg_we & !reg_error;
  assign host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_insertion_wd = reg_wdata[25];

  assign host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_removal_we = addr_hit[10] & reg_we & !reg_error;
  assign host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_removal_wd = reg_wdata[26];

  assign clock_and_timeout_control_and_software_reset_internal_clock_enable_we = addr_hit[11] & reg_we & !reg_error;
  assign clock_and_timeout_control_and_software_reset_internal_clock_enable_wd = reg_wdata[0];

  assign clock_and_timeout_control_and_software_reset_sd_clock_enable_we = addr_hit[11] & reg_we & !reg_error;
  assign clock_and_timeout_control_and_software_reset_sd_clock_enable_wd = reg_wdata[2];

  assign clock_and_timeout_control_and_software_reset_sdclk_frequency_select_we = addr_hit[11] & reg_we & !reg_error;
  assign clock_and_timeout_control_and_software_reset_sdclk_frequency_select_wd = reg_wdata[15:8];

  assign clock_and_timeout_control_and_software_reset_data_timeout_counter_value_we = addr_hit[11] & reg_we & !reg_error;
  assign clock_and_timeout_control_and_software_reset_data_timeout_counter_value_wd = reg_wdata[19:16];

  assign clock_and_timeout_control_and_software_reset_software_reset_for_all_we = addr_hit[11] & reg_we & !reg_error;
  assign clock_and_timeout_control_and_software_reset_software_reset_for_all_wd = reg_wdata[24];

  assign clock_and_timeout_control_and_software_reset_software_reset_for_cmd_line_we = addr_hit[11] & reg_we & !reg_error;
  assign clock_and_timeout_control_and_software_reset_software_reset_for_cmd_line_wd = reg_wdata[25];

  assign clock_and_timeout_control_and_software_reset_software_reset_for_dat_line_we = addr_hit[11] & reg_we & !reg_error;
  assign clock_and_timeout_control_and_software_reset_software_reset_for_dat_line_wd = reg_wdata[26];

  assign normal_and_error_interrupt_status_command_complete_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_command_complete_wd = reg_wdata[0];

  assign normal_and_error_interrupt_status_transfer_complete_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_transfer_complete_wd = reg_wdata[1];

  assign normal_and_error_interrupt_status_block_gap_event_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_block_gap_event_wd = reg_wdata[2];

  assign normal_and_error_interrupt_status_dma_interrupt_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_dma_interrupt_wd = reg_wdata[3];

  assign normal_and_error_interrupt_status_buffer_write_ready_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_buffer_write_ready_wd = reg_wdata[4];

  assign normal_and_error_interrupt_status_buffer_read_ready_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_buffer_read_ready_wd = reg_wdata[5];

  assign normal_and_error_interrupt_status_card_insertion_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_card_insertion_wd = reg_wdata[6];

  assign normal_and_error_interrupt_status_card_removal_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_card_removal_wd = reg_wdata[7];

  assign normal_and_error_interrupt_status_command_timeout_error_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_command_timeout_error_wd = reg_wdata[16];

  assign normal_and_error_interrupt_status_command_crc_error_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_command_crc_error_wd = reg_wdata[17];

  assign normal_and_error_interrupt_status_command_end_bit_error_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_command_end_bit_error_wd = reg_wdata[18];

  assign normal_and_error_interrupt_status_command_index_error_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_command_index_error_wd = reg_wdata[19];

  assign normal_and_error_interrupt_status_data_timeout_error_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_data_timeout_error_wd = reg_wdata[20];

  assign normal_and_error_interrupt_status_data_crc_error_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_data_crc_error_wd = reg_wdata[21];

  assign normal_and_error_interrupt_status_data_end_bit_error_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_data_end_bit_error_wd = reg_wdata[22];

  assign normal_and_error_interrupt_status_current_limit_error_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_current_limit_error_wd = reg_wdata[23];

  assign normal_and_error_interrupt_status_auto_cmd12_error_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_auto_cmd12_error_wd = reg_wdata[24];

  assign normal_and_error_interrupt_status_vendor_specific_error_status_we = addr_hit[12] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_vendor_specific_error_status_wd = reg_wdata[31:28];

  assign normal_and_error_interrupt_status_enable_command_complete_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_command_complete_status_enable_wd = reg_wdata[0];

  assign normal_and_error_interrupt_status_enable_transfer_complete_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_transfer_complete_status_enable_wd = reg_wdata[1];

  assign normal_and_error_interrupt_status_enable_block_gap_event_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_block_gap_event_status_enable_wd = reg_wdata[2];

  assign normal_and_error_interrupt_status_enable_dma_interrupt_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_dma_interrupt_status_enable_wd = reg_wdata[3];

  assign normal_and_error_interrupt_status_enable_buffer_write_ready_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_buffer_write_ready_status_enable_wd = reg_wdata[4];

  assign normal_and_error_interrupt_status_enable_buffer_read_ready_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_buffer_read_ready_status_enable_wd = reg_wdata[5];

  assign normal_and_error_interrupt_status_enable_card_insertion_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_card_insertion_status_enable_wd = reg_wdata[6];

  assign normal_and_error_interrupt_status_enable_card_removal_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_card_removal_status_enable_wd = reg_wdata[7];

  assign normal_and_error_interrupt_status_enable_card_interrupt_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_card_interrupt_status_enable_wd = reg_wdata[8];

  assign normal_and_error_interrupt_status_enable_command_timeout_error_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_command_timeout_error_status_enable_wd = reg_wdata[16];

  assign normal_and_error_interrupt_status_enable_command_crc_error_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_command_crc_error_status_enable_wd = reg_wdata[17];

  assign normal_and_error_interrupt_status_enable_command_end_bit_error_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_command_end_bit_error_status_enable_wd = reg_wdata[18];

  assign normal_and_error_interrupt_status_enable_command_index_error_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_command_index_error_status_enable_wd = reg_wdata[19];

  assign normal_and_error_interrupt_status_enable_data_timeout_error_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_data_timeout_error_status_enable_wd = reg_wdata[20];

  assign normal_and_error_interrupt_status_enable_data_crc_error_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_data_crc_error_status_enable_wd = reg_wdata[21];

  assign normal_and_error_interrupt_status_enable_data_end_bit_error_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_data_end_bit_error_status_enable_wd = reg_wdata[22];

  assign normal_and_error_interrupt_status_enable_current_limit_error_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_current_limit_error_status_enable_wd = reg_wdata[23];

  assign normal_and_error_interrupt_status_enable_auto_cmd12_error_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_auto_cmd12_error_status_enable_wd = reg_wdata[24];

  assign normal_and_error_interrupt_status_enable_vendor_specific_error_status_enable_we = addr_hit[13] & reg_we & !reg_error;
  assign normal_and_error_interrupt_status_enable_vendor_specific_error_status_enable_wd = reg_wdata[31:28];

  assign normal_and_error_interrupt_signal_enable_command_complete_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_command_complete_signal_enable_wd = reg_wdata[0];

  assign normal_and_error_interrupt_signal_enable_transfer_complete_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_transfer_complete_signal_enable_wd = reg_wdata[1];

  assign normal_and_error_interrupt_signal_enable_block_gap_event_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_block_gap_event_signal_enable_wd = reg_wdata[2];

  assign normal_and_error_interrupt_signal_enable_dma_interrupt_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_dma_interrupt_signal_enable_wd = reg_wdata[3];

  assign normal_and_error_interrupt_signal_enable_buffer_write_ready_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_buffer_write_ready_signal_enable_wd = reg_wdata[4];

  assign normal_and_error_interrupt_signal_enable_buffer_read_ready_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_buffer_read_ready_signal_enable_wd = reg_wdata[5];

  assign normal_and_error_interrupt_signal_enable_card_insertion_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_card_insertion_signal_enable_wd = reg_wdata[6];

  assign normal_and_error_interrupt_signal_enable_card_removal_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_card_removal_signal_enable_wd = reg_wdata[7];

  assign normal_and_error_interrupt_signal_enable_card_interrupt_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_card_interrupt_signal_enable_wd = reg_wdata[8];

  assign normal_and_error_interrupt_signal_enable_command_timeout_error_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_command_timeout_error_signal_enable_wd = reg_wdata[16];

  assign normal_and_error_interrupt_signal_enable_command_crc_error_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_command_crc_error_signal_enable_wd = reg_wdata[17];

  assign normal_and_error_interrupt_signal_enable_command_end_bit_error_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_command_end_bit_error_signal_enable_wd = reg_wdata[18];

  assign normal_and_error_interrupt_signal_enable_command_index_error_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_command_index_error_signal_enable_wd = reg_wdata[19];

  assign normal_and_error_interrupt_signal_enable_data_timeout_error_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_data_timeout_error_signal_enable_wd = reg_wdata[20];

  assign normal_and_error_interrupt_signal_enable_data_crc_error_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_data_crc_error_signal_enable_wd = reg_wdata[21];

  assign normal_and_error_interrupt_signal_enable_data_end_bit_error_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_data_end_bit_error_signal_enable_wd = reg_wdata[22];

  assign normal_and_error_interrupt_signal_enable_current_limit_error_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_current_limit_error_signal_enable_wd = reg_wdata[23];

  assign normal_and_error_interrupt_signal_enable_auto_cmd12_error_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_auto_cmd12_error_signal_enable_wd = reg_wdata[24];

  assign normal_and_error_interrupt_signal_enable_vendor_specific_error_signal_enable_we = addr_hit[14] & reg_we & !reg_error;
  assign normal_and_error_interrupt_signal_enable_vendor_specific_error_signal_enable_wd = reg_wdata[31:28];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = system_address_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[11:0] = block_size_and_count_transfer_block_size_qs;
        reg_rdata_next[14:12] = block_size_and_count_host_dma_buffer_boundary_qs;
        reg_rdata_next[15] = block_size_and_count_rsvd_15_qs;
        reg_rdata_next[31:16] = block_size_and_count_blocks_count_for_current_transfer_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = argument_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = transfer_mode_and_command_dma_enable_qs;
        reg_rdata_next[1] = transfer_mode_and_command_block_count_enable_qs;
        reg_rdata_next[2] = transfer_mode_and_command_auto_cmd12_enable_qs;
        reg_rdata_next[3] = transfer_mode_and_command_rsvd_3_qs;
        reg_rdata_next[4] = transfer_mode_and_command_data_transfer_direction_select_qs;
        reg_rdata_next[5] = transfer_mode_and_command_multi_single_bit_block_select_qs;
        reg_rdata_next[15:6] = transfer_mode_and_command_rsvd_15_qs;
        reg_rdata_next[17:16] = transfer_mode_and_command_response_type_select_qs;
        reg_rdata_next[18] = transfer_mode_and_command_rsvd_18_qs;
        reg_rdata_next[19] = transfer_mode_and_command_command_crc_check_enable_qs;
        reg_rdata_next[20] = transfer_mode_and_command_command_index_check_enable_qs;
        reg_rdata_next[21] = transfer_mode_and_command_data_present_select_qs;
        reg_rdata_next[23:22] = transfer_mode_and_command_command_type_qs;
        reg_rdata_next[29:24] = transfer_mode_and_command_command_index_qs;
        reg_rdata_next[31:30] = transfer_mode_and_command_rsvd_31_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = response0_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = response1_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = response2_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = response3_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = buffer_data_port_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = present_state_command_inhibit_cmd_qs;
        reg_rdata_next[1] = present_state_command_inhibit_dat_qs;
        reg_rdata_next[2] = present_state_dat_line_active_qs;
        reg_rdata_next[7:3] = present_state_rsvd_7_qs;
        reg_rdata_next[8] = present_state_write_transfer_active_qs;
        reg_rdata_next[9] = present_state_read_transfer_active_qs;
        reg_rdata_next[10] = present_state_buffer_write_enable_qs;
        reg_rdata_next[11] = present_state_buffer_read_enable_qs;
        reg_rdata_next[15:12] = present_state_rsvd_15_qs;
        reg_rdata_next[16] = present_state_card_inserted_qs;
        reg_rdata_next[17] = present_state_card_state_stable_qs;
        reg_rdata_next[18] = present_state_card_detect_pin_level_qs;
        reg_rdata_next[19] = present_state_write_protect_switch_pin_level_qs;
        reg_rdata_next[23:20] = present_state_dat_line_signal_level_qs;
        reg_rdata_next[24] = present_state_cmd_line_signal_level_qs;
        reg_rdata_next[31:25] = present_state_rsvd_31_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = host_and_power_and_block_gap_and_wakeup_control_led_control_qs;
        reg_rdata_next[1] = host_and_power_and_block_gap_and_wakeup_control_data_transfer_width_qs;
        reg_rdata_next[2] = host_and_power_and_block_gap_and_wakeup_control_high_speed_enable_qs;
        reg_rdata_next[7:3] = host_and_power_and_block_gap_and_wakeup_control_rsvd_7_qs;
        reg_rdata_next[8] = host_and_power_and_block_gap_and_wakeup_control_sd_bus_power_qs;
        reg_rdata_next[11:9] = host_and_power_and_block_gap_and_wakeup_control_sd_bus_voltage_select_qs;
        reg_rdata_next[15:12] = host_and_power_and_block_gap_and_wakeup_control_rsvd_15_qs;
        reg_rdata_next[16] = host_and_power_and_block_gap_and_wakeup_control_stop_at_block_gap_request_qs;
        reg_rdata_next[17] = host_and_power_and_block_gap_and_wakeup_control_continue_request_qs;
        reg_rdata_next[18] = host_and_power_and_block_gap_and_wakeup_control_read_wait_control_qs;
        reg_rdata_next[19] = host_and_power_and_block_gap_and_wakeup_control_interrupt_at_block_gap_qs;
        reg_rdata_next[23:20] = host_and_power_and_block_gap_and_wakeup_control_rsvd_23_qs;
        reg_rdata_next[24] = host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_card_interrupt_qs;
        reg_rdata_next[25] = host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_insertion_qs;
        reg_rdata_next[26] = host_and_power_and_block_gap_and_wakeup_control_wakeup_event_enable_on_sd_card_removal_qs;
        reg_rdata_next[31:27] = host_and_power_and_block_gap_and_wakeup_control_rsvd_31_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = clock_and_timeout_control_and_software_reset_internal_clock_enable_qs;
        reg_rdata_next[1] = clock_and_timeout_control_and_software_reset_internal_clock_stable_qs;
        reg_rdata_next[2] = clock_and_timeout_control_and_software_reset_sd_clock_enable_qs;
        reg_rdata_next[7:3] = clock_and_timeout_control_and_software_reset_rsvd_7_qs;
        reg_rdata_next[15:8] = clock_and_timeout_control_and_software_reset_sdclk_frequency_select_qs;
        reg_rdata_next[19:16] = clock_and_timeout_control_and_software_reset_data_timeout_counter_value_qs;
        reg_rdata_next[23:20] = clock_and_timeout_control_and_software_reset_rsvd_23_qs;
        reg_rdata_next[24] = clock_and_timeout_control_and_software_reset_software_reset_for_all_qs;
        reg_rdata_next[25] = clock_and_timeout_control_and_software_reset_software_reset_for_cmd_line_qs;
        reg_rdata_next[26] = clock_and_timeout_control_and_software_reset_software_reset_for_dat_line_qs;
        reg_rdata_next[31:28] = clock_and_timeout_control_and_software_reset_rsvd_31_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = normal_and_error_interrupt_status_command_complete_qs;
        reg_rdata_next[1] = normal_and_error_interrupt_status_transfer_complete_qs;
        reg_rdata_next[2] = normal_and_error_interrupt_status_block_gap_event_qs;
        reg_rdata_next[3] = normal_and_error_interrupt_status_dma_interrupt_qs;
        reg_rdata_next[4] = normal_and_error_interrupt_status_buffer_write_ready_qs;
        reg_rdata_next[5] = normal_and_error_interrupt_status_buffer_read_ready_qs;
        reg_rdata_next[6] = normal_and_error_interrupt_status_card_insertion_qs;
        reg_rdata_next[7] = normal_and_error_interrupt_status_card_removal_qs;
        reg_rdata_next[8] = normal_and_error_interrupt_status_card_interrupt_qs;
        reg_rdata_next[14:9] = normal_and_error_interrupt_status_rsvd_14_qs;
        reg_rdata_next[15] = normal_and_error_interrupt_status_error_interrupt_qs;
        reg_rdata_next[16] = normal_and_error_interrupt_status_command_timeout_error_qs;
        reg_rdata_next[17] = normal_and_error_interrupt_status_command_crc_error_qs;
        reg_rdata_next[18] = normal_and_error_interrupt_status_command_end_bit_error_qs;
        reg_rdata_next[19] = normal_and_error_interrupt_status_command_index_error_qs;
        reg_rdata_next[20] = normal_and_error_interrupt_status_data_timeout_error_qs;
        reg_rdata_next[21] = normal_and_error_interrupt_status_data_crc_error_qs;
        reg_rdata_next[22] = normal_and_error_interrupt_status_data_end_bit_error_qs;
        reg_rdata_next[23] = normal_and_error_interrupt_status_current_limit_error_qs;
        reg_rdata_next[24] = normal_and_error_interrupt_status_auto_cmd12_error_qs;
        reg_rdata_next[27:25] = normal_and_error_interrupt_status_rsvd_27_qs;
        reg_rdata_next[31:28] = normal_and_error_interrupt_status_vendor_specific_error_status_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = normal_and_error_interrupt_status_enable_command_complete_status_enable_qs;
        reg_rdata_next[1] = normal_and_error_interrupt_status_enable_transfer_complete_status_enable_qs;
        reg_rdata_next[2] = normal_and_error_interrupt_status_enable_block_gap_event_status_enable_qs;
        reg_rdata_next[3] = normal_and_error_interrupt_status_enable_dma_interrupt_status_enable_qs;
        reg_rdata_next[4] = normal_and_error_interrupt_status_enable_buffer_write_ready_status_enable_qs;
        reg_rdata_next[5] = normal_and_error_interrupt_status_enable_buffer_read_ready_status_enable_qs;
        reg_rdata_next[6] = normal_and_error_interrupt_status_enable_card_insertion_status_enable_qs;
        reg_rdata_next[7] = normal_and_error_interrupt_status_enable_card_removal_status_enable_qs;
        reg_rdata_next[8] = normal_and_error_interrupt_status_enable_card_interrupt_status_enable_qs;
        reg_rdata_next[14:9] = normal_and_error_interrupt_status_enable_rsvd_14_qs;
        reg_rdata_next[15] = normal_and_error_interrupt_status_enable_fixed_to_0_qs;
        reg_rdata_next[16] = normal_and_error_interrupt_status_enable_command_timeout_error_status_enable_qs;
        reg_rdata_next[17] = normal_and_error_interrupt_status_enable_command_crc_error_status_enable_qs;
        reg_rdata_next[18] = normal_and_error_interrupt_status_enable_command_end_bit_error_status_enable_qs;
        reg_rdata_next[19] = normal_and_error_interrupt_status_enable_command_index_error_status_enable_qs;
        reg_rdata_next[20] = normal_and_error_interrupt_status_enable_data_timeout_error_status_enable_qs;
        reg_rdata_next[21] = normal_and_error_interrupt_status_enable_data_crc_error_status_enable_qs;
        reg_rdata_next[22] = normal_and_error_interrupt_status_enable_data_end_bit_error_status_enable_qs;
        reg_rdata_next[23] = normal_and_error_interrupt_status_enable_current_limit_error_status_enable_qs;
        reg_rdata_next[24] = normal_and_error_interrupt_status_enable_auto_cmd12_error_status_enable_qs;
        reg_rdata_next[27:25] = normal_and_error_interrupt_status_enable_rsvd_27_qs;
        reg_rdata_next[31:28] = normal_and_error_interrupt_status_enable_vendor_specific_error_status_enable_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = normal_and_error_interrupt_signal_enable_command_complete_signal_enable_qs;
        reg_rdata_next[1] = normal_and_error_interrupt_signal_enable_transfer_complete_signal_enable_qs;
        reg_rdata_next[2] = normal_and_error_interrupt_signal_enable_block_gap_event_signal_enable_qs;
        reg_rdata_next[3] = normal_and_error_interrupt_signal_enable_dma_interrupt_signal_enable_qs;
        reg_rdata_next[4] = normal_and_error_interrupt_signal_enable_buffer_write_ready_signal_enable_qs;
        reg_rdata_next[5] = normal_and_error_interrupt_signal_enable_buffer_read_ready_signal_enable_qs;
        reg_rdata_next[6] = normal_and_error_interrupt_signal_enable_card_insertion_signal_enable_qs;
        reg_rdata_next[7] = normal_and_error_interrupt_signal_enable_card_removal_signal_enable_qs;
        reg_rdata_next[8] = normal_and_error_interrupt_signal_enable_card_interrupt_signal_enable_qs;
        reg_rdata_next[14:9] = normal_and_error_interrupt_signal_enable_rsvd_14_qs;
        reg_rdata_next[15] = normal_and_error_interrupt_signal_enable_fixed_to_0_qs;
        reg_rdata_next[16] = normal_and_error_interrupt_signal_enable_command_timeout_error_signal_enable_qs;
        reg_rdata_next[17] = normal_and_error_interrupt_signal_enable_command_crc_error_signal_enable_qs;
        reg_rdata_next[18] = normal_and_error_interrupt_signal_enable_command_end_bit_error_signal_enable_qs;
        reg_rdata_next[19] = normal_and_error_interrupt_signal_enable_command_index_error_signal_enable_qs;
        reg_rdata_next[20] = normal_and_error_interrupt_signal_enable_data_timeout_error_signal_enable_qs;
        reg_rdata_next[21] = normal_and_error_interrupt_signal_enable_data_crc_error_signal_enable_qs;
        reg_rdata_next[22] = normal_and_error_interrupt_signal_enable_data_end_bit_error_signal_enable_qs;
        reg_rdata_next[23] = normal_and_error_interrupt_signal_enable_current_limit_error_signal_enable_qs;
        reg_rdata_next[24] = normal_and_error_interrupt_signal_enable_auto_cmd12_error_signal_enable_qs;
        reg_rdata_next[27:25] = normal_and_error_interrupt_signal_enable_rsvd_27_qs;
        reg_rdata_next[31:28] = normal_and_error_interrupt_signal_enable_vendor_specific_error_signal_enable_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = auto_cmd12_error_status_auto_cmd12_not_executed_qs;
        reg_rdata_next[1] = auto_cmd12_error_status_auto_cmd12_timeout_error_qs;
        reg_rdata_next[2] = auto_cmd12_error_status_auto_cmd12_crc_error_qs;
        reg_rdata_next[3] = auto_cmd12_error_status_auto_cmd12_end_bit_error_qs;
        reg_rdata_next[4] = auto_cmd12_error_status_auto_cmd12_index_error_qs;
        reg_rdata_next[6:5] = auto_cmd12_error_status_rsvd_6_qs;
        reg_rdata_next[7] = auto_cmd12_error_status_command_not_issued_by_auto_cmd12_error_qs;
        reg_rdata_next[15:8] = auto_cmd12_error_status_rsvd_15_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[5:0] = capabilities_timeout_clock_frequency_qs;
        reg_rdata_next[6] = capabilities_rsvd_6_qs;
        reg_rdata_next[7] = capabilities_timeout_clock_unit_qs;
        reg_rdata_next[13:8] = capabilities_base_clock_frequency_for_sd_clock_qs;
        reg_rdata_next[15:14] = capabilities_rsvd_15_qs;
        reg_rdata_next[17:16] = capabilities_max_block_length_qs;
        reg_rdata_next[20:18] = capabilities_rsvd_20_qs;
        reg_rdata_next[21] = capabilities_high_speed_support_qs;
        reg_rdata_next[22] = capabilities_dma_support_qs;
        reg_rdata_next[23] = capabilities_suspend_resume_support_qs;
        reg_rdata_next[24] = capabilities_voltage_support_3_3v_qs;
        reg_rdata_next[25] = capabilities_voltage_support_3_0v_qs;
        reg_rdata_next[26] = capabilities_voltage_support_1_8v_qs;
        reg_rdata_next[31:27] = capabilities_rsvd_63_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[7:0] = maximum_current_capabilities_maximum_current_for_3_3v_qs;
        reg_rdata_next[15:8] = maximum_current_capabilities_maximum_current_for_3_0v_qs;
        reg_rdata_next[23:16] = maximum_current_capabilities_maximum_current_for_1_8v_qs;
        reg_rdata_next[31:24] = maximum_current_capabilities_rsvd_63_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[7:0] = slot_interrupt_status_and_host_controller_version_interrupt_signal_for_each_slot_qs;
        reg_rdata_next[15:8] = slot_interrupt_status_and_host_controller_version_rsvd_15_qs;
        reg_rdata_next[23:16] = slot_interrupt_status_and_host_controller_version_specification_version_number_qs;
        reg_rdata_next[31:24] = slot_interrupt_status_and_host_controller_version_vendor_version_number_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module sdhci_reg_top_intf
#(
  parameter int AW = 8,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output sdhci_reg_pkg::sdhci_reg2hw_t reg2hw, // Write
  input  sdhci_reg_pkg::sdhci_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  sdhci_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


