// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package sdhci_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 9;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic        q;
  } sdhci_reg2hw_intr_state_reg_t;

  typedef struct packed {
    logic        q;
  } sdhci_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } sdhci_reg2hw_intr_test_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } sdhci_reg2hw_system_address_reg_t;

  typedef struct packed {
    struct packed {
      logic [11:0] q;
    } transfer_block_size;
    struct packed {
      logic [2:0]  q;
    } host_dma_buffer_boundary;
    struct packed {
      logic        q;
    } rsvd_15;
    struct packed {
      logic [15:0] q;
    } blocks_count_for_current_transfer;
  } sdhci_reg2hw_block_size_and_count_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } sdhci_reg2hw_argument_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } dma_enable;
    struct packed {
      logic        q;
    } block_count_enable;
    struct packed {
      logic        q;
    } auto_cmd12_enable;
    struct packed {
      logic        q;
    } rsvd_3;
    struct packed {
      logic        q;
    } data_transfer_direction_select;
    struct packed {
      logic        q;
    } multi_single_bit_block_select;
    struct packed {
      logic [9:0] q;
    } rsvd_15;
    struct packed {
      logic [1:0]  q;
    } response_type_select;
    struct packed {
      logic        q;
    } rsvd_18;
    struct packed {
      logic        q;
    } command_crc_check_enable;
    struct packed {
      logic        q;
    } command_index_check_enable;
    struct packed {
      logic        q;
    } data_present_select;
    struct packed {
      logic [1:0]  q;
    } command_type;
    struct packed {
      logic [5:0]  q;
    } command_index;
    struct packed {
      logic [1:0]  q;
    } rsvd_31;
  } sdhci_reg2hw_transfer_mode_and_command_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } sdhci_reg2hw_response0_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } sdhci_reg2hw_response1_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } sdhci_reg2hw_response2_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } sdhci_reg2hw_response3_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } sdhci_reg2hw_buffer_data_port_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } command_inhibit_cmd;
    struct packed {
      logic        q;
    } command_inhibit_dat;
    struct packed {
      logic        q;
    } dat_line_active;
    struct packed {
      logic [4:0]  q;
    } rsvd_7;
    struct packed {
      logic        q;
    } write_transfer_active;
    struct packed {
      logic        q;
    } read_transfer_active;
    struct packed {
      logic        q;
    } buffer_write_enable;
    struct packed {
      logic        q;
    } buffer_read_enable;
    struct packed {
      logic [3:0]  q;
    } rsvd_15;
    struct packed {
      logic        q;
    } card_inserted;
    struct packed {
      logic        q;
    } card_state_stable;
    struct packed {
      logic        q;
    } card_detect_pin_level;
    struct packed {
      logic        q;
    } write_protect_switch_pin_level;
    struct packed {
      logic [3:0]  q;
    } dat_line_signal_level;
    struct packed {
      logic        q;
    } cmd_line_signal_level;
    struct packed {
      logic [6:0]  q;
    } rsvd_31;
  } sdhci_reg2hw_present_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } led_control;
    struct packed {
      logic        q;
    } data_transfer_width;
    struct packed {
      logic        q;
    } high_speed_enable;
    struct packed {
      logic [4:0]  q;
    } rsvd_7;
    struct packed {
      logic        q;
    } sd_bus_power;
    struct packed {
      logic [2:0]  q;
    } sd_bus_voltage_select;
    struct packed {
      logic [3:0]  q;
    } rsvd_15;
    struct packed {
      logic        q;
    } stop_at_block_gap_request;
    struct packed {
      logic        q;
    } continue_request;
    struct packed {
      logic        q;
    } read_wait_control;
    struct packed {
      logic        q;
    } interrupt_at_block_gap;
    struct packed {
      logic [3:0]  q;
    } rsvd_23;
    struct packed {
      logic        q;
    } wakeup_event_enable_on_card_interrupt;
    struct packed {
      logic        q;
    } wakeup_event_enable_on_sd_card_insertion;
    struct packed {
      logic        q;
    } wakeup_event_enable_on_sd_card_removal;
    struct packed {
      logic [4:0]  q;
    } rsvd_31;
  } sdhci_reg2hw_host_and_power_and_block_gap_and_wakeup_control_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } internal_clock_enable;
    struct packed {
      logic        q;
    } internal_clock_stable;
    struct packed {
      logic        q;
    } sd_clock_enable;
    struct packed {
      logic [4:0]  q;
    } rsvd_7;
    struct packed {
      logic [7:0]  q;
    } sdclk_frequency_select;
    struct packed {
      logic [3:0]  q;
    } data_timeout_counter_value;
    struct packed {
      logic [3:0]  q;
    } rsvd_23;
    struct packed {
      logic        q;
    } software_reset_for_all;
    struct packed {
      logic        q;
    } software_reset_for_cmd_line;
    struct packed {
      logic        q;
    } software_reset_for_dat_line;
    struct packed {
      logic [3:0]  q;
    } rsvd_31;
  } sdhci_reg2hw_clock_and_timeout_control_and_software_reset_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } command_complete;
    struct packed {
      logic        q;
    } transfer_complete;
    struct packed {
      logic        q;
    } block_gap_event;
    struct packed {
      logic        q;
    } dma_interrupt;
    struct packed {
      logic        q;
    } buffer_write_ready;
    struct packed {
      logic        q;
    } buffer_read_ready;
    struct packed {
      logic        q;
    } card_insertion;
    struct packed {
      logic        q;
    } card_removal;
    struct packed {
      logic        q;
    } card_interrupt;
    struct packed {
      logic [5:0]  q;
    } rsvd_14;
    struct packed {
      logic        q;
    } error_interrupt;
    struct packed {
      logic        q;
    } command_timeout_error;
    struct packed {
      logic        q;
    } command_crc_error;
    struct packed {
      logic        q;
    } command_end_bit_error;
    struct packed {
      logic        q;
    } command_index_error;
    struct packed {
      logic        q;
    } data_timeout_error;
    struct packed {
      logic        q;
    } data_crc_error;
    struct packed {
      logic        q;
    } data_end_bit_error;
    struct packed {
      logic        q;
    } current_limit_error;
    struct packed {
      logic        q;
    } auto_cmd12_error;
    struct packed {
      logic [2:0]  q;
    } rsvd_27;
    struct packed {
      logic [3:0]  q;
    } vendor_specific_error_status;
  } sdhci_reg2hw_normal_and_error_interrupt_status_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } command_complete_status_enable;
    struct packed {
      logic        q;
    } transfer_complete_status_enable;
    struct packed {
      logic        q;
    } block_gap_event_status_enable;
    struct packed {
      logic        q;
    } dma_interrupt_status_enable;
    struct packed {
      logic        q;
    } buffer_write_ready_status_enable;
    struct packed {
      logic        q;
    } buffer_read_ready_status_enable;
    struct packed {
      logic        q;
    } card_insertion_status_enable;
    struct packed {
      logic        q;
    } card_removal_status_enable;
    struct packed {
      logic        q;
    } card_interrupt_status_enable;
    struct packed {
      logic [5:0]  q;
    } rsvd_14;
    struct packed {
      logic        q;
    } fixed_to_0;
    struct packed {
      logic        q;
    } command_timeout_error_status_enable;
    struct packed {
      logic        q;
    } command_crc_error_status_enable;
    struct packed {
      logic        q;
    } command_end_bit_error_status_enable;
    struct packed {
      logic        q;
    } command_index_error_status_enable;
    struct packed {
      logic        q;
    } data_timeout_error_status_enable;
    struct packed {
      logic        q;
    } data_crc_error_status_enable;
    struct packed {
      logic        q;
    } data_end_bit_error_status_enable;
    struct packed {
      logic        q;
    } current_limit_error_status_enable;
    struct packed {
      logic        q;
    } auto_cmd12_error_status_enable;
    struct packed {
      logic [2:0]  q;
    } rsvd_27;
    struct packed {
      logic [3:0]  q;
    } vendor_specific_error_status_enable;
  } sdhci_reg2hw_normal_and_error_interrupt_status_enable_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } command_complete_signal_enable;
    struct packed {
      logic        q;
    } transfer_complete_signal_enable;
    struct packed {
      logic        q;
    } block_gap_event_signal_enable;
    struct packed {
      logic        q;
    } dma_interrupt_signal_enable;
    struct packed {
      logic        q;
    } buffer_write_ready_signal_enable;
    struct packed {
      logic        q;
    } buffer_read_ready_signal_enable;
    struct packed {
      logic        q;
    } card_insertion_signal_enable;
    struct packed {
      logic        q;
    } card_removal_signal_enable;
    struct packed {
      logic        q;
    } card_interrupt_signal_enable;
    struct packed {
      logic [5:0]  q;
    } rsvd_14;
    struct packed {
      logic        q;
    } fixed_to_0;
    struct packed {
      logic        q;
    } command_timeout_error_signal_enable;
    struct packed {
      logic        q;
    } command_crc_error_signal_enable;
    struct packed {
      logic        q;
    } command_end_bit_error_signal_enable;
    struct packed {
      logic        q;
    } command_index_error_signal_enable;
    struct packed {
      logic        q;
    } data_timeout_error_signal_enable;
    struct packed {
      logic        q;
    } data_crc_error_signal_enable;
    struct packed {
      logic        q;
    } data_end_bit_error_signal_enable;
    struct packed {
      logic        q;
    } current_limit_error_signal_enable;
    struct packed {
      logic        q;
    } auto_cmd12_error_signal_enable;
    struct packed {
      logic [2:0]  q;
    } rsvd_27;
    struct packed {
      logic [3:0]  q;
    } vendor_specific_error_signal_enable;
  } sdhci_reg2hw_normal_and_error_interrupt_signal_enable_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } auto_cmd12_not_executed;
    struct packed {
      logic        q;
    } auto_cmd12_timeout_error;
    struct packed {
      logic        q;
    } auto_cmd12_crc_error;
    struct packed {
      logic        q;
    } auto_cmd12_end_bit_error;
    struct packed {
      logic        q;
    } auto_cmd12_index_error;
    struct packed {
      logic [1:0]  q;
    } rsvd_6;
    struct packed {
      logic        q;
    } command_not_issued_by_auto_cmd12_error;
    struct packed {
      logic [7:0]  q;
    } rsvd_15;
  } sdhci_reg2hw_auto_cmd12_error_status_reg_t;

  typedef struct packed {
    struct packed {
      logic [5:0]  q;
    } timeout_clock_frequency;
    struct packed {
      logic        q;
    } rsvd_6;
    struct packed {
      logic        q;
    } timeout_clock_unit;
    struct packed {
      logic [5:0]  q;
    } base_clock_frequency_for_sd_clock;
    struct packed {
      logic [1:0]  q;
    } rsvd_15;
    struct packed {
      logic [1:0]  q;
    } max_block_length;
    struct packed {
      logic [2:0]  q;
    } rsvd_20;
    struct packed {
      logic        q;
    } high_speed_support;
    struct packed {
      logic        q;
    } dma_support;
    struct packed {
      logic        q;
    } suspend_resume_support;
    struct packed {
      logic        q;
    } voltage_support_3_3v;
    struct packed {
      logic        q;
    } voltage_support_3_0v;
    struct packed {
      logic        q;
    } voltage_support_1_8v;
    struct packed {
      logic [4:0]  q;
    } rsvd_63;
  } sdhci_reg2hw_capabilities_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  q;
    } maximum_current_for_3_3v;
    struct packed {
      logic [7:0]  q;
    } maximum_current_for_3_0v;
    struct packed {
      logic [7:0]  q;
    } maximum_current_for_1_8v;
    struct packed {
      logic [7:0]  q;
    } rsvd_63;
  } sdhci_reg2hw_maximum_current_capabilities_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  q;
    } interrupt_signal_for_each_slot;
    struct packed {
      logic [7:0]  q;
    } rsvd_15;
    struct packed {
      logic [7:0]  q;
    } specification_version_number;
    struct packed {
      logic [7:0]  q;
    } vendor_version_number;
  } sdhci_reg2hw_slot_interrupt_status_and_host_controller_version_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } sdhci_hw2reg_intr_state_reg_t;

  // Register -> HW type
  typedef struct packed {
    sdhci_reg2hw_intr_state_reg_t intr_state; // [594:594]
    sdhci_reg2hw_intr_enable_reg_t intr_enable; // [593:593]
    sdhci_reg2hw_intr_test_reg_t intr_test; // [592:591]
    sdhci_reg2hw_system_address_reg_t system_address; // [590:559]
    sdhci_reg2hw_block_size_and_count_reg_t block_size_and_count; // [558:527]
    sdhci_reg2hw_argument_reg_t argument; // [526:495]
    sdhci_reg2hw_transfer_mode_and_command_reg_t transfer_mode_and_command; // [494:463]
    sdhci_reg2hw_response0_reg_t response0; // [462:431]
    sdhci_reg2hw_response1_reg_t response1; // [430:399]
    sdhci_reg2hw_response2_reg_t response2; // [398:367]
    sdhci_reg2hw_response3_reg_t response3; // [366:335]
    sdhci_reg2hw_buffer_data_port_reg_t buffer_data_port; // [334:303]
    sdhci_reg2hw_present_state_reg_t present_state; // [302:271]
    sdhci_reg2hw_host_and_power_and_block_gap_and_wakeup_control_reg_t host_and_power_and_block_gap_and_wakeup_control; // [270:239]
    sdhci_reg2hw_clock_and_timeout_control_and_software_reset_reg_t clock_and_timeout_control_and_software_reset; // [238:208]
    sdhci_reg2hw_normal_and_error_interrupt_status_reg_t normal_and_error_interrupt_status; // [207:176]
    sdhci_reg2hw_normal_and_error_interrupt_status_enable_reg_t normal_and_error_interrupt_status_enable; // [175:144]
    sdhci_reg2hw_normal_and_error_interrupt_signal_enable_reg_t normal_and_error_interrupt_signal_enable; // [143:112]
    sdhci_reg2hw_auto_cmd12_error_status_reg_t auto_cmd12_error_status; // [111:96]
    sdhci_reg2hw_capabilities_reg_t capabilities; // [95:64]
    sdhci_reg2hw_maximum_current_capabilities_reg_t maximum_current_capabilities; // [63:32]
    sdhci_reg2hw_slot_interrupt_status_and_host_controller_version_reg_t slot_interrupt_status_and_host_controller_version; // [31:0]
  } sdhci_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    sdhci_hw2reg_intr_state_reg_t intr_state; // [1:0]
  } sdhci_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] SDHCI_INTR_STATE_OFFSET = 9'h 0;
  parameter logic [BlockAw-1:0] SDHCI_INTR_ENABLE_OFFSET = 9'h 4;
  parameter logic [BlockAw-1:0] SDHCI_INTR_TEST_OFFSET = 9'h 8;
  parameter logic [BlockAw-1:0] SDHCI_SYSTEM_ADDRESS_OFFSET = 9'h c;
  parameter logic [BlockAw-1:0] SDHCI_BLOCK_SIZE_AND_COUNT_OFFSET = 9'h 10;
  parameter logic [BlockAw-1:0] SDHCI_ARGUMENT_OFFSET = 9'h 14;
  parameter logic [BlockAw-1:0] SDHCI_TRANSFER_MODE_AND_COMMAND_OFFSET = 9'h 18;
  parameter logic [BlockAw-1:0] SDHCI_RESPONSE0_OFFSET = 9'h 1c;
  parameter logic [BlockAw-1:0] SDHCI_RESPONSE1_OFFSET = 9'h 20;
  parameter logic [BlockAw-1:0] SDHCI_RESPONSE2_OFFSET = 9'h 24;
  parameter logic [BlockAw-1:0] SDHCI_RESPONSE3_OFFSET = 9'h 28;
  parameter logic [BlockAw-1:0] SDHCI_BUFFER_DATA_PORT_OFFSET = 9'h 2c;
  parameter logic [BlockAw-1:0] SDHCI_PRESENT_STATE_OFFSET = 9'h 30;
  parameter logic [BlockAw-1:0] SDHCI_HOST_AND_POWER_AND_BLOCK_GAP_AND_WAKEUP_CONTROL_OFFSET = 9'h 34;
  parameter logic [BlockAw-1:0] SDHCI_CLOCK_AND_TIMEOUT_CONTROL_AND_SOFTWARE_RESET_OFFSET = 9'h 38;
  parameter logic [BlockAw-1:0] SDHCI_NORMAL_AND_ERROR_INTERRUPT_STATUS_OFFSET = 9'h 3c;
  parameter logic [BlockAw-1:0] SDHCI_NORMAL_AND_ERROR_INTERRUPT_STATUS_ENABLE_OFFSET = 9'h 40;
  parameter logic [BlockAw-1:0] SDHCI_NORMAL_AND_ERROR_INTERRUPT_SIGNAL_ENABLE_OFFSET = 9'h 44;
  parameter logic [BlockAw-1:0] SDHCI_AUTO_CMD12_ERROR_STATUS_OFFSET = 9'h 48;
  parameter logic [BlockAw-1:0] SDHCI_CAPABILITIES_OFFSET = 9'h 4c;
  parameter logic [BlockAw-1:0] SDHCI_MAXIMUM_CURRENT_CAPABILITIES_OFFSET = 9'h 54;
  parameter logic [BlockAw-1:0] SDHCI_SLOT_INTERRUPT_STATUS_AND_HOST_CONTROLLER_VERSION_OFFSET = 9'h 108;

  // Reset values for hwext registers and their fields
  parameter logic [0:0] SDHCI_INTR_TEST_RESVAL = 1'h 0;
  parameter logic [0:0] SDHCI_INTR_TEST_SDHCI_INTERRUPT_RESVAL = 1'h 0;

  // Register index
  typedef enum int {
    SDHCI_INTR_STATE,
    SDHCI_INTR_ENABLE,
    SDHCI_INTR_TEST,
    SDHCI_SYSTEM_ADDRESS,
    SDHCI_BLOCK_SIZE_AND_COUNT,
    SDHCI_ARGUMENT,
    SDHCI_TRANSFER_MODE_AND_COMMAND,
    SDHCI_RESPONSE0,
    SDHCI_RESPONSE1,
    SDHCI_RESPONSE2,
    SDHCI_RESPONSE3,
    SDHCI_BUFFER_DATA_PORT,
    SDHCI_PRESENT_STATE,
    SDHCI_HOST_AND_POWER_AND_BLOCK_GAP_AND_WAKEUP_CONTROL,
    SDHCI_CLOCK_AND_TIMEOUT_CONTROL_AND_SOFTWARE_RESET,
    SDHCI_NORMAL_AND_ERROR_INTERRUPT_STATUS,
    SDHCI_NORMAL_AND_ERROR_INTERRUPT_STATUS_ENABLE,
    SDHCI_NORMAL_AND_ERROR_INTERRUPT_SIGNAL_ENABLE,
    SDHCI_AUTO_CMD12_ERROR_STATUS,
    SDHCI_CAPABILITIES,
    SDHCI_MAXIMUM_CURRENT_CAPABILITIES,
    SDHCI_SLOT_INTERRUPT_STATUS_AND_HOST_CONTROLLER_VERSION
  } sdhci_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] SDHCI_PERMIT [22] = '{
    4'b 0001, // index[ 0] SDHCI_INTR_STATE
    4'b 0001, // index[ 1] SDHCI_INTR_ENABLE
    4'b 0001, // index[ 2] SDHCI_INTR_TEST
    4'b 1111, // index[ 3] SDHCI_SYSTEM_ADDRESS
    4'b 1111, // index[ 4] SDHCI_BLOCK_SIZE_AND_COUNT
    4'b 1111, // index[ 5] SDHCI_ARGUMENT
    4'b 1111, // index[ 6] SDHCI_TRANSFER_MODE_AND_COMMAND
    4'b 1111, // index[ 7] SDHCI_RESPONSE0
    4'b 1111, // index[ 8] SDHCI_RESPONSE1
    4'b 1111, // index[ 9] SDHCI_RESPONSE2
    4'b 1111, // index[10] SDHCI_RESPONSE3
    4'b 1111, // index[11] SDHCI_BUFFER_DATA_PORT
    4'b 1111, // index[12] SDHCI_PRESENT_STATE
    4'b 1111, // index[13] SDHCI_HOST_AND_POWER_AND_BLOCK_GAP_AND_WAKEUP_CONTROL
    4'b 1111, // index[14] SDHCI_CLOCK_AND_TIMEOUT_CONTROL_AND_SOFTWARE_RESET
    4'b 1111, // index[15] SDHCI_NORMAL_AND_ERROR_INTERRUPT_STATUS
    4'b 1111, // index[16] SDHCI_NORMAL_AND_ERROR_INTERRUPT_STATUS_ENABLE
    4'b 1111, // index[17] SDHCI_NORMAL_AND_ERROR_INTERRUPT_SIGNAL_ENABLE
    4'b 0011, // index[18] SDHCI_AUTO_CMD12_ERROR_STATUS
    4'b 1111, // index[19] SDHCI_CAPABILITIES
    4'b 1111, // index[20] SDHCI_MAXIMUM_CURRENT_CAPABILITIES
    4'b 1111  // index[21] SDHCI_SLOT_INTERRUPT_STATUS_AND_HOST_CONTROLLER_VERSION
  };

endpackage

